{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/backend/client/src/contexts/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { dataReducer } from \"../reducers/dataReducer\";\nimport { url, DATA_LOADED_FAIL, DATA_LOADED_SUCCESS, ADD_DEVICE, CONFIG, STATE_LOADED_FAIL, STATE_LOADED_SUCCESS, ADD_CONFIGTYPE, DELETE_CONFIGTYPE, FIND_CONFIGTYPE, UPDATE_CONFIGTYPE } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\n\nconst DataContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //state\n  const [dataState, dispatch] = useReducer(dataReducer, {\n    data: [],\n    dataLoading: true\n  });\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null\n  }); //get data\n\n  const getData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data/chart`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const addDevices = async newDevice => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n\n      if (response.data.success) {\n        dispatch({\n          type: ADD_DEVICE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; // config data\n\n\n  const config = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; //get current config\n\n\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  }; //post new config type\n\n\n  const addConfigtype = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata/configtype`, newConfig);\n\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; /// get status of device\n\n\n  const getState = async () => {\n    try {\n      const responce = await axios.get(`${url}/state`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: STATE_LOADED_SUCCESS,\n          payload: responce.data.getState\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: STATE_LOADED_FAIL\n      });\n    }\n  }; /// get config type of Crops\n\n\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const dataContextData = {\n    dataState,\n    addDevices,\n    getData,\n    getChartData,\n    config,\n    getConfigData,\n    getState,\n    addConfigtype,\n    getConfigType\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: dataContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataContextProvider, \"TkybVDfTsp9fhIc23M0Z4WVEVj4=\");\n\n_c = DataContextProvider;\nexport default DataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/backend/client/src/contexts/DataContext.js"],"names":["createContext","useReducer","dataReducer","url","DATA_LOADED_FAIL","DATA_LOADED_SUCCESS","ADD_DEVICE","CONFIG","STATE_LOADED_FAIL","STATE_LOADED_SUCCESS","ADD_CONFIGTYPE","DELETE_CONFIGTYPE","FIND_CONFIGTYPE","UPDATE_CONFIGTYPE","axios","DataContext","DataContextProvider","children","dataState","dispatch","data","dataLoading","showAddTypeModal","setShowAddTypeModal","useState","showUpdateTypeModal","setShowUpdateTypeModal","showToast","setShowToast","show","message","type","getData","responce","get","success","payload","getalldata","error","getChartData","addDevices","newDevice","response","post","config","newConfig","getConfigData","getLastConfigData","addConfigtype","getState","getConfigType","getLastConfigType","dataContextData"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from \"react\";\nimport { dataReducer } from \"../reducers/dataReducer\";\nimport {\n  url,\n  DATA_LOADED_FAIL,\n  DATA_LOADED_SUCCESS,\n  ADD_DEVICE,\n  CONFIG,\n  STATE_LOADED_FAIL,\n  STATE_LOADED_SUCCESS,\n  ADD_CONFIGTYPE,\n  DELETE_CONFIGTYPE,\n  FIND_CONFIGTYPE,\n  UPDATE_CONFIGTYPE,\n} from \"./constants\";\nimport axios from \"axios\";\n\nexport const DataContext = createContext();\n\nconst DataContextProvider = ({ children }) => {\n  //state\n  const [dataState, dispatch] = useReducer(dataReducer, {\n    data: [],\n    dataLoading: true,\n  });\n\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null,\n  });\n  //get data\n  const getData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data/chart`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const addDevices = async (newDevice) => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n      if (response.data.success) {\n        dispatch({\n          type: ADD_DEVICE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n  // config data\n  const config = async (newConfig) => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  //get current config\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  //post new config type\n\n  const addConfigtype = async (newConfig) => {\n    try {\n      const response = await axios.post(\n        `${url}/configdata/configtype`,\n        newConfig\n      );\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  /// get status of device\n  const getState = async () => {\n    try {\n      const responce = await axios.get(`${url}/state`);\n      if (responce.data.success) {\n        dispatch({\n          type: STATE_LOADED_SUCCESS,\n          payload: responce.data.getState,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: STATE_LOADED_FAIL });\n    }\n  };\n\n  /// get config type of Crops\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const dataContextData = {\n    dataState,\n    addDevices,\n    getData,\n    getChartData,\n    config,\n    getConfigData,\n    getState,\n    addConfigtype,\n    getConfigType,\n  };\n  return (\n    <DataContext.Provider value={dataContextData}>\n      {children}\n    </DataContext.Provider>\n  );\n};\nexport default DataContextProvider;\n"]},"metadata":{},"sourceType":"module"}