{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/backend/client/src/contexts/TypeContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useState } from \"react\";\nimport { typeReducer } from \"../reducers/typeReducer\";\nimport { url, CONFIGTYPE_LOADED_SUCCESS, CONFIGTYPE_LOADED_FAIL, ADD_CONFIGTYPE, DELETE_CONFIGTYPE, FIND_CONFIGTYPE, UPDATE_CONFIGTYPE } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TypeContext = /*#__PURE__*/createContext();\n\nconst TypeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [typeState, dispatchType] = useReducer(typeReducer, {\n    config: [],\n    configLoading: true\n  }); /// get config type of Crops\n\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n\n      if (responce.data.success) {\n        dispatchType({\n          type: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatchType({\n        type: CONFIGTYPE_LOADED_FAIL\n      });\n      console.log(\"fail\");\n    }\n  }; // const addConfigtype = async (newConfig) => {\n  //   try {\n  //     const response = await axios.post(\n  //       `${url}/configdata/configtype`,\n  //       newConfig\n  //     );\n  //     if (response.data.success) {\n  //       dispatchType({\n  //         type: ADD_CONFIGTYPE,\n  //         payload: response.data.post,\n  //       });\n  //       return response.data;\n  //     }\n  //   } catch (error) {\n  //     return error.response.data\n  //       ? error.response.data\n  //       : { success: false, message: \"Server error\" };\n  //   }\n  // };\n\n\n  const typeContextData = {\n    typeState,\n    //addConfigtype,\n    getConfigType\n  };\n  return /*#__PURE__*/_jsxDEV(TypeContext.Provider, {\n    value: typeContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TypeContextProvider, \"u5OeWl4AOivMMKw276xzX8xcp8s=\");\n\n_c = TypeContextProvider;\nexport default TypeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/backend/client/src/contexts/TypeContext.js"],"names":["createContext","useReducer","useState","typeReducer","url","CONFIGTYPE_LOADED_SUCCESS","CONFIGTYPE_LOADED_FAIL","ADD_CONFIGTYPE","DELETE_CONFIGTYPE","FIND_CONFIGTYPE","UPDATE_CONFIGTYPE","axios","TypeContext","TypeContextProvider","children","typeState","dispatchType","config","configLoading","getConfigType","responce","get","data","success","type","payload","getLastConfigType","error","console","log","typeContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,GADF,EAEEC,yBAFF,EAGEC,sBAHF,EAIEC,cAJF,EAKEC,iBALF,EAMEC,eANF,EAOEC,iBAPF,QAQO,aARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,EAAjC;;AAEP,MAAMa,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,UAAU,CAACE,WAAD,EAAc;AACxDc,IAAAA,MAAM,EAAE,EADgD;AAExDC,IAAAA,aAAa,EAAE;AAFyC,GAAd,CAA5C,CAD4C,CAM5C;;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEjB,GAAI,wBAAjB,CAAvB;;AACA,UAAIgB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBP,QAAAA,YAAY,CAAC;AACXQ,UAAAA,IAAI,EAAEnB,yBADK;AAEXoB,UAAAA,OAAO,EAAEL,QAAQ,CAACE,IAAT,CAAcI;AAFZ,SAAD,CAAZ;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdX,MAAAA,YAAY,CAAC;AAAEQ,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAZ;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACF,GAbD,CAP4C,CAsB5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,eAAe,GAAG;AACtBf,IAAAA,SADsB;AAEtB;AACAI,IAAAA;AAHsB,GAAxB;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEW,eAA7B;AAAA,cACGhB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApDD;;GAAMD,mB;;KAAAA,mB;AAqDN,eAAeA,mBAAf","sourcesContent":["import { createContext, useReducer, useState } from \"react\";\nimport { typeReducer } from \"../reducers/typeReducer\";\nimport {\n  url,\n  CONFIGTYPE_LOADED_SUCCESS,\n  CONFIGTYPE_LOADED_FAIL,\n  ADD_CONFIGTYPE,\n  DELETE_CONFIGTYPE,\n  FIND_CONFIGTYPE,\n  UPDATE_CONFIGTYPE,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const TypeContext = createContext();\n\nconst TypeContextProvider = ({ children }) => {\n  const [typeState, dispatchType] = useReducer(typeReducer, {\n    config: [],\n    configLoading: true,\n  });\n\n  /// get config type of Crops\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n      if (responce.data.success) {\n        dispatchType({\n          type: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatchType({ type: CONFIGTYPE_LOADED_FAIL });\n      console.log(\"fail\");\n    }\n  };\n\n  // const addConfigtype = async (newConfig) => {\n  //   try {\n  //     const response = await axios.post(\n  //       `${url}/configdata/configtype`,\n  //       newConfig\n  //     );\n  //     if (response.data.success) {\n  //       dispatchType({\n  //         type: ADD_CONFIGTYPE,\n  //         payload: response.data.post,\n  //       });\n  //       return response.data;\n  //     }\n  //   } catch (error) {\n  //     return error.response.data\n  //       ? error.response.data\n  //       : { success: false, message: \"Server error\" };\n  //   }\n  // };\n\n  const typeContextData = {\n    typeState,\n    //addConfigtype,\n    getConfigType,\n  };\n  return (\n    <TypeContext.Provider value={typeContextData}>\n      {children}\n    </TypeContext.Provider>\n  );\n};\nexport default TypeContextProvider;\n"]},"metadata":{},"sourceType":"module"}