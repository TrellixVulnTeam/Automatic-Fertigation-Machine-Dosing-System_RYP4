{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/ESP32_full/src/client/src/contexts/DeviceContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useState } from \"react\";\nimport { deviceReducer } from \"../reducers/deviceReducer\";\nimport { url, DEVICE_LOADED_FAIL, DEVICE_LOADED_SUCCESS, ADD_DEVICE } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeviceContext = /*#__PURE__*/createContext();\n\nconst DeviceContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //state\n  const [deviceState, dispatchDevice] = useReducer(deviceReducer, {\n    device: []\n  }); //get device\n\n  const getDevice = async () => {\n    try {\n      const responce = await axios.get(`${url}/device`);\n\n      if (responce.data.success) {\n        dispatchDevice({\n          type: DEVICE_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatchDevice({\n        type: DEVICE_LOADED_FAIL\n      });\n    }\n  };\n\n  const addDevices = async newDevice => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n\n      if (response.data.success) {\n        dispatchDevice({\n          type: ADD_DEVICE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  };\n\n  const deviceContextData = {\n    addDevices,\n    getDevice\n  };\n  return /*#__PURE__*/_jsxDEV(DeviceContext.Provider, {\n    value: deviceContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeviceContextProvider, \"Ed/lvJMmO/aggbpvC1qR3NL1Eb8=\");\n\n_c = DeviceContextProvider;\nexport default DeviceContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeviceContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/ESP32_full/src/client/src/contexts/DeviceContext.js"],"names":["createContext","useReducer","useState","deviceReducer","url","DEVICE_LOADED_FAIL","DEVICE_LOADED_SUCCESS","ADD_DEVICE","axios","DeviceContext","DeviceContextProvider","children","deviceState","dispatchDevice","device","getDevice","responce","get","data","success","type","payload","getalldata","error","addDevices","newDevice","response","post","message","deviceContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SACEC,GADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,UAJF,QAKO,aALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,aAAa,gBAAGT,aAAa,EAAnC;;AAEP,MAAMU,qBAAqB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9C;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,UAAU,CAACE,aAAD,EAAgB;AAC9DW,IAAAA,MAAM,EAAE;AADsD,GAAhB,CAAhD,CAF8C,CAM9C;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEb,GAAI,SAAjB,CAAvB;;AACA,UAAIY,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBN,QAAAA,cAAc,CAAC;AACbO,UAAAA,IAAI,EAAEd,qBADO;AAEbe,UAAAA,OAAO,EAAEL,QAAQ,CAACE,IAAT,CAAcI;AAFV,SAAD,CAAd;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdV,MAAAA,cAAc,CAAC;AAAEO,QAAAA,IAAI,EAAEf;AAAR,OAAD,CAAd;AACD;AACF,GAZD;;AAcA,QAAMmB,UAAU,GAAG,MAAOC,SAAP,IAAqB;AACtC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAY,GAAEvB,GAAI,SAAlB,EAA4BqB,SAA5B,CAAvB;;AACA,UAAIC,QAAQ,CAACR,IAAT,CAAcC,OAAlB,EAA2B;AACzBN,QAAAA,cAAc,CAAC;AACbO,UAAAA,IAAI,EAAEb,UADO;AAEbc,UAAAA,OAAO,EAAEK,QAAQ,CAACR,IAAT,CAAcS;AAFV,SAAD,CAAd;AAIA,eAAOD,QAAQ,CAACR,IAAhB;AACD;AACF,KATD,CASE,OAAOK,KAAP,EAAc;AACd,aAAOA,KAAK,CAACG,QAAN,CAAeR,IAAf,GACHK,KAAK,CAACG,QAAN,CAAeR,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBS,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD;;AAiBA,QAAMC,iBAAiB,GAAG;AACxBL,IAAAA,UADwB;AAExBT,IAAAA;AAFwB,GAA1B;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEc,iBAA/B;AAAA,cACGlB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhDD;;GAAMD,qB;;KAAAA,qB;AAiDN,eAAeA,qBAAf","sourcesContent":["import { createContext, useReducer, useState } from \"react\";\nimport { deviceReducer } from \"../reducers/deviceReducer\";\nimport {\n  url,\n  DEVICE_LOADED_FAIL,\n  DEVICE_LOADED_SUCCESS,\n  ADD_DEVICE,\n} from \"./constants\";\nimport axios from \"axios\";\n\nexport const DeviceContext = createContext();\n\nconst DeviceContextProvider = ({ children }) => {\n  //state\n  const [deviceState, dispatchDevice] = useReducer(deviceReducer, {\n    device: [],\n  });\n\n  //get device\n\n  const getDevice = async () => {\n    try {\n      const responce = await axios.get(`${url}/device`);\n      if (responce.data.success) {\n        dispatchDevice({\n          type: DEVICE_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatchDevice({ type: DEVICE_LOADED_FAIL });\n    }\n  };\n\n  const addDevices = async (newDevice) => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n      if (response.data.success) {\n        dispatchDevice({\n          type: ADD_DEVICE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  const deviceContextData = {\n    addDevices,\n    getDevice,\n  };\n  return (\n    <DeviceContext.Provider value={deviceContextData}>\n      {children}\n    </DeviceContext.Provider>\n  );\n};\nexport default DeviceContextProvider;\n"]},"metadata":{},"sourceType":"module"}