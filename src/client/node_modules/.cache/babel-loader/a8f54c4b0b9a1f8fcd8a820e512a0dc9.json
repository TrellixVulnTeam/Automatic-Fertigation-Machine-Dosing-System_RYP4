{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/backend/client/src/contexts/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { dataReducer } from \"../reducers/dataReducer\";\nimport { url, DATA_LOADED_FAIL, DATA_LOADED_SUCCESS, ADD_DEVICE, CONFIG, STATE_LOADED_FAIL, STATE_LOADED_SUCCESS } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\n\nconst DataContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //state\n  const [dataState, dispatch] = useReducer(dataReducer, {\n    data: [],\n    dataLoading: true\n  }); //get data\n\n  const getData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data/chart`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const addDevices = async newDevice => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n\n      if (response.data.success) {\n        dispatch({\n          type: ADD_DEVICE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; // config data\n\n\n  const config = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; //get current config\n\n\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  }; //post new config type\n\n\n  const addConfigtype = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata/configtype`, newConfig);\n\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; /// get status of device\n\n\n  const getState = async () => {\n    try {\n      const responce = await axios.get(`${url}/state`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: STATE_LOADED_SUCCESS,\n          payload: responce.data.getState\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: STATE_LOADED_FAIL\n      });\n    }\n  }; /// get config type of Crops\n\n\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const dataContextData = {\n    dataState,\n    addDevices,\n    getData,\n    getChartData,\n    config,\n    getConfigData,\n    getState,\n    addConfigtype,\n    getConfigType\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: dataContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataContextProvider, \"9RC4vE3FBr09zvBgTEwhqv5ksp4=\");\n\n_c = DataContextProvider;\nexport default DataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/backend/client/src/contexts/DataContext.js"],"names":["createContext","useReducer","dataReducer","url","DATA_LOADED_FAIL","DATA_LOADED_SUCCESS","ADD_DEVICE","CONFIG","STATE_LOADED_FAIL","STATE_LOADED_SUCCESS","axios","DataContext","DataContextProvider","children","dataState","dispatch","data","dataLoading","getData","responce","get","success","type","payload","getalldata","error","getChartData","addDevices","newDevice","response","post","message","config","newConfig","getConfigData","getLastConfigData","addConfigtype","getState","getConfigType","getLastConfigType","dataContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,GADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,iBANF,EAOEC,oBAPF,QAQO,aARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,WAAW,gBAAGX,aAAa,EAAjC;;AAEP,MAAMY,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACC,WAAD,EAAc;AACpDc,IAAAA,IAAI,EAAE,EAD8C;AAEpDC,IAAAA,WAAW,EAAE;AAFuC,GAAd,CAAxC,CAF4C,CAO5C;;AACA,QAAMC,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEjB,GAAI,OAAjB,CAAvB;;AACA,UAAIgB,QAAQ,CAACH,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEjB,mBADC;AAEPkB,UAAAA,OAAO,EAAEJ,QAAQ,CAACH,IAAT,CAAcQ;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAR;AACD;AACF,GAZD;;AAcA,QAAMsB,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMP,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEjB,GAAI,aAAjB,CAAvB;;AACA,UAAIgB,QAAQ,CAACH,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEjB,mBADC;AAEPkB,UAAAA,OAAO,EAAEJ,QAAQ,CAACH,IAAT,CAAcQ;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAR;AACD;AACF,GAZD;;AAcA,QAAMuB,UAAU,GAAG,MAAOC,SAAP,IAAqB;AACtC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAY,GAAE3B,GAAI,SAAlB,EAA4ByB,SAA5B,CAAvB;;AACA,UAAIC,QAAQ,CAACb,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEhB,UADC;AAEPiB,UAAAA,OAAO,EAAEM,QAAQ,CAACb,IAAT,CAAcc;AAFhB,SAAD,CAAR;AAIA,eAAOD,QAAQ,CAACb,IAAhB;AACD;AACF,KATD,CASE,OAAOS,KAAP,EAAc;AACd,aAAOA,KAAK,CAACI,QAAN,CAAeb,IAAf,GACHS,KAAK,CAACI,QAAN,CAAeb,IADZ,GAEH;AAAEK,QAAAA,OAAO,EAAE,KAAX;AAAkBU,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CApC4C,CAoD5C;;;AACA,QAAMC,MAAM,GAAG,MAAOC,SAAP,IAAqB;AAClC,QAAI;AACF,YAAMJ,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAY,GAAE3B,GAAI,aAAlB,EAAgC8B,SAAhC,CAAvB;;AACA,UAAIJ,QAAQ,CAACb,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEf,MADC;AAEPgB,UAAAA,OAAO,EAAEM,QAAQ,CAACb,IAAT,CAAcc;AAFhB,SAAD,CAAR;AAIA,eAAOD,QAAQ,CAACb,IAAhB;AACD;AACF,KATD,CASE,OAAOS,KAAP,EAAc;AACd,aAAOA,KAAK,CAACI,QAAN,CAAeb,IAAf,GACHS,KAAK,CAACI,QAAN,CAAeb,IADZ,GAEH;AAAEK,QAAAA,OAAO,EAAE,KAAX;AAAkBU,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CArD4C,CAsE5C;;;AACA,QAAMG,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMf,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEjB,GAAI,aAAjB,CAAvB;;AACA,UAAIgB,QAAQ,CAACH,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEjB,mBADC;AAEPkB,UAAAA,OAAO,EAAEJ,QAAQ,CAACH,IAAT,CAAcmB;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOV,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAR;AACD;AACF,GAZD,CAvE4C,CAqF5C;;;AAEA,QAAMgC,aAAa,GAAG,MAAOH,SAAP,IAAqB;AACzC,QAAI;AACF,YAAMJ,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CACpB,GAAE3B,GAAI,wBADc,EAErB8B,SAFqB,CAAvB;;AAIA,UAAIJ,QAAQ,CAACb,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEf,MADC;AAEPgB,UAAAA,OAAO,EAAEM,QAAQ,CAACb,IAAT,CAAcc;AAFhB,SAAD,CAAR;AAIA,eAAOD,QAAQ,CAACb,IAAhB;AACD;AACF,KAZD,CAYE,OAAOS,KAAP,EAAc;AACd,aAAOA,KAAK,CAACI,QAAN,CAAeb,IAAf,GACHS,KAAK,CAACI,QAAN,CAAeb,IADZ,GAEH;AAAEK,QAAAA,OAAO,EAAE,KAAX;AAAkBU,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAlBD,CAvF4C,CA2G5C;;;AACA,QAAMM,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMlB,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEjB,GAAI,QAAjB,CAAvB;;AACA,UAAIgB,QAAQ,CAACH,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEb,oBADC;AAEPc,UAAAA,OAAO,EAAEJ,QAAQ,CAACH,IAAT,CAAcqB;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOZ,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAR;AACD;AACF,GAZD,CA5G4C,CA0H5C;;;AACA,QAAM8B,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMnB,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEjB,GAAI,wBAAjB,CAAvB;;AACA,UAAIgB,QAAQ,CAACH,IAAT,CAAcK,OAAlB,EAA2B;AACzBN,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEjB,mBADC;AAEPkB,UAAAA,OAAO,EAAEJ,QAAQ,CAACH,IAAT,CAAcuB;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOd,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAR;AACD;AACF,GAZD;;AAcA,QAAMoC,eAAe,GAAG;AACtB1B,IAAAA,SADsB;AAEtBa,IAAAA,UAFsB;AAGtBT,IAAAA,OAHsB;AAItBQ,IAAAA,YAJsB;AAKtBM,IAAAA,MALsB;AAMtBE,IAAAA,aANsB;AAOtBG,IAAAA,QAPsB;AAQtBD,IAAAA,aARsB;AAStBE,IAAAA;AATsB,GAAxB;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,eAA7B;AAAA,cACG3B;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzJD;;GAAMD,mB;;KAAAA,mB;AA0JN,eAAeA,mBAAf","sourcesContent":["import { createContext, useReducer } from \"react\";\nimport { dataReducer } from \"../reducers/dataReducer\";\nimport {\n  url,\n  DATA_LOADED_FAIL,\n  DATA_LOADED_SUCCESS,\n  ADD_DEVICE,\n  CONFIG,\n  STATE_LOADED_FAIL,\n  STATE_LOADED_SUCCESS,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const DataContext = createContext();\n\nconst DataContextProvider = ({ children }) => {\n  //state\n  const [dataState, dispatch] = useReducer(dataReducer, {\n    data: [],\n    dataLoading: true,\n  });\n\n  //get data\n  const getData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data/chart`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const addDevices = async (newDevice) => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n      if (response.data.success) {\n        dispatch({\n          type: ADD_DEVICE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n  // config data\n  const config = async (newConfig) => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  //get current config\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  //post new config type\n\n  const addConfigtype = async (newConfig) => {\n    try {\n      const response = await axios.post(\n        `${url}/configdata/configtype`,\n        newConfig\n      );\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  /// get status of device\n  const getState = async () => {\n    try {\n      const responce = await axios.get(`${url}/state`);\n      if (responce.data.success) {\n        dispatch({\n          type: STATE_LOADED_SUCCESS,\n          payload: responce.data.getState,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: STATE_LOADED_FAIL });\n    }\n  };\n\n  /// get config type of Crops\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const dataContextData = {\n    dataState,\n    addDevices,\n    getData,\n    getChartData,\n    config,\n    getConfigData,\n    getState,\n    addConfigtype,\n    getConfigType,\n  };\n  return (\n    <DataContext.Provider value={dataContextData}>\n      {children}\n    </DataContext.Provider>\n  );\n};\nexport default DataContextProvider;\n"]},"metadata":{},"sourceType":"module"}