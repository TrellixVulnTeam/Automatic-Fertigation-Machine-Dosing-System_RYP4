{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/LVTN/client/src/contexts/TypeContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useState } from \"react\";\nimport { typeReducer } from \"../reducers/typeReducer\";\nimport { configReducer } from \"../reducers/configReducer\";\nimport { url, CONFIGTYPE_LOADED_SUCCESS, CONFIGTYPE_LOADED_FAIL, ADD_CONFIGTYPE, DELETE_CONFIGTYPE, FIND_CONFIGTYPE, UPDATE_CONFIGTYPE, ADD_CONFIGDATA } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TypeContext = /*#__PURE__*/createContext();\n\nconst TypeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [typeState, dispatchType] = useReducer(typeReducer, {\n    configtype: null,\n    config: [],\n    configLoading: true\n  });\n  const [configState, dispatchConfig] = useReducer(configReducer, {\n    currentConfig: [],\n    configLoading: true\n  });\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null\n  }); /// get config type of Crops\n\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n\n      if (responce.data.success) {\n        dispatchType({\n          type: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatchType({\n        type: CONFIGTYPE_LOADED_FAIL\n      });\n    }\n  };\n\n  const addConfigtype = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata/configtype`, newConfig);\n\n      if (response.data.success) {\n        dispatchType({\n          type: ADD_CONFIGTYPE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  };\n\n  const deleteConfigType = async configTypeId => {\n    try {\n      const responce = await axios.delete(`${url}/configdata/configtype/${configTypeId}`);\n      if (responce.data.success) dispatchType({\n        type: DELETE_CONFIGTYPE,\n        payload: configTypeId\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const findConfigType = configTypeId => {\n    const configtype = typeState.config.find(configtype => configtype._id === configTypeId);\n    dispatchType({\n      type: FIND_CONFIGTYPE,\n      payload: configtype\n    });\n  };\n\n  const updateConfigType = async updatedConfigType => {\n    try {\n      const response = await axios.put(`${url}/configdata/configtype/${updatedConfigType._id}`, updatedConfigType);\n\n      if (response.data.success) {\n        dispatchType({\n          type: UPDATE_CONFIGTYPE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; // config data\n\n\n  const config = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n\n      if (response.data.success) {\n        dispatchConfig({\n          currentConfig: ADD_CONFIGDATA,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; //get current config\n\n\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n\n      if (responce.data.success) {\n        dispatchConfig({\n          currentConfig: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData\n        });\n      }\n    } catch (error) {\n      dispatchConfig({\n        type: CONFIGTYPE_LOADED_FAIL\n      });\n    }\n  };\n\n  const typeContextData = {\n    config,\n    getConfigData,\n    configState,\n    typeState,\n    addConfigtype,\n    getConfigType,\n    showAddTypeModal,\n    setShowAddTypeModal,\n    showToast,\n    setShowToast,\n    deleteConfigType,\n    findConfigType,\n    updateConfigType,\n    showUpdateTypeModal,\n    setShowUpdateTypeModal\n  };\n  return /*#__PURE__*/_jsxDEV(TypeContext.Provider, {\n    value: typeContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TypeContextProvider, \"rxxZj9NdHPbRvUuhchXc/CFl2aE=\");\n\n_c = TypeContextProvider;\nexport default TypeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/LVTN/client/src/contexts/TypeContext.js"],"names":["createContext","useReducer","useState","typeReducer","configReducer","url","CONFIGTYPE_LOADED_SUCCESS","CONFIGTYPE_LOADED_FAIL","ADD_CONFIGTYPE","DELETE_CONFIGTYPE","FIND_CONFIGTYPE","UPDATE_CONFIGTYPE","ADD_CONFIGDATA","axios","TypeContext","TypeContextProvider","children","typeState","dispatchType","configtype","config","configLoading","configState","dispatchConfig","currentConfig","showAddTypeModal","setShowAddTypeModal","showUpdateTypeModal","setShowUpdateTypeModal","showToast","setShowToast","show","message","type","getConfigType","responce","get","data","success","payload","getLastConfigType","error","addConfigtype","newConfig","response","post","deleteConfigType","configTypeId","delete","console","log","findConfigType","find","_id","updateConfigType","updatedConfigType","put","getConfigData","getLastConfigData","typeContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SACEC,GADF,EAEEC,yBAFF,EAGEC,sBAHF,EAIEC,cAJF,EAKEC,iBALF,EAMEC,eANF,EAOEC,iBAPF,EAQEC,cARF,QASO,aATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,WAAW,gBAAGd,aAAa,EAAjC;;AAEP,MAAMe,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,UAAU,CAACE,WAAD,EAAc;AACxDgB,IAAAA,UAAU,EAAE,IAD4C;AAExDC,IAAAA,MAAM,EAAE,EAFgD;AAGxDC,IAAAA,aAAa,EAAE;AAHyC,GAAd,CAA5C;AAKA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCtB,UAAU,CAACG,aAAD,EAAgB;AAC9DoB,IAAAA,aAAa,EAAE,EAD+C;AAE9DH,IAAAA,aAAa,EAAE;AAF+C,GAAhB,CAAhD;AAKA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CxB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACyB,mBAAD,EAAsBC,sBAAtB,IAAgD1B,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC;AACzC6B,IAAAA,IAAI,EAAE,KADmC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,IAAI,EAAE;AAHmC,GAAD,CAA1C,CAb4C,CAmB5C;;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAW,GAAE/B,GAAI,wBAAjB,CAAvB;;AACA,UAAI8B,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBpB,QAAAA,YAAY,CAAC;AACXe,UAAAA,IAAI,EAAE3B,yBADK;AAEXiC,UAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAcG;AAFZ,SAAD,CAAZ;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdvB,MAAAA,YAAY,CAAC;AAAEe,QAAAA,IAAI,EAAE1B;AAAR,OAAD,CAAZ;AACD;AACF,GAZD;;AAcA,QAAMmC,aAAa,GAAG,MAAOC,SAAP,IAAqB;AACzC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAM/B,KAAK,CAACgC,IAAN,CACpB,GAAExC,GAAI,wBADc,EAErBsC,SAFqB,CAAvB;;AAIA,UAAIC,QAAQ,CAACP,IAAT,CAAcC,OAAlB,EAA2B;AACzBpB,QAAAA,YAAY,CAAC;AACXe,UAAAA,IAAI,EAAEzB,cADK;AAEX+B,UAAAA,OAAO,EAAEK,QAAQ,CAACP,IAAT,CAAcQ;AAFZ,SAAD,CAAZ;AAIA,eAAOD,QAAQ,CAACP,IAAhB;AACD;AACF,KAZD,CAYE,OAAOI,KAAP,EAAc;AACd,aAAOA,KAAK,CAACG,QAAN,CAAeP,IAAf,GACHI,KAAK,CAACG,QAAN,CAAeP,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBN,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAlBD;;AAoBA,QAAMc,gBAAgB,GAAG,MAAOC,YAAP,IAAwB;AAC/C,QAAI;AACF,YAAMZ,QAAQ,GAAG,MAAMtB,KAAK,CAACmC,MAAN,CACpB,GAAE3C,GAAI,0BAAyB0C,YAAa,EADxB,CAAvB;AAGA,UAAIZ,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EACEpB,YAAY,CAAC;AAAEe,QAAAA,IAAI,EAAExB,iBAAR;AAA2B8B,QAAAA,OAAO,EAAEQ;AAApC,OAAD,CAAZ;AACH,KAND,CAME,OAAON,KAAP,EAAc;AACdQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACD;AACF,GAVD;;AAYA,QAAMU,cAAc,GAAIJ,YAAD,IAAkB;AACvC,UAAM5B,UAAU,GAAGF,SAAS,CAACG,MAAV,CAAiBgC,IAAjB,CAChBjC,UAAD,IAAgBA,UAAU,CAACkC,GAAX,KAAmBN,YADlB,CAAnB;AAGA7B,IAAAA,YAAY,CAAC;AAAEe,MAAAA,IAAI,EAAEvB,eAAR;AAAyB6B,MAAAA,OAAO,EAAEpB;AAAlC,KAAD,CAAZ;AACD,GALD;;AAOA,QAAMmC,gBAAgB,GAAG,MAAOC,iBAAP,IAA6B;AACpD,QAAI;AACF,YAAMX,QAAQ,GAAG,MAAM/B,KAAK,CAAC2C,GAAN,CACpB,GAAEnD,GAAI,0BAAyBkD,iBAAiB,CAACF,GAAI,EADjC,EAErBE,iBAFqB,CAAvB;;AAIA,UAAIX,QAAQ,CAACP,IAAT,CAAcC,OAAlB,EAA2B;AACzBpB,QAAAA,YAAY,CAAC;AACXe,UAAAA,IAAI,EAAEtB,iBADK;AAEX4B,UAAAA,OAAO,EAAEK,QAAQ,CAACP,IAAT,CAAcQ;AAFZ,SAAD,CAAZ;AAIA,eAAOD,QAAQ,CAACP,IAAhB;AACD;AACF,KAZD,CAYE,OAAOI,KAAP,EAAc;AACd,aAAOA,KAAK,CAACG,QAAN,CAAeP,IAAf,GACHI,KAAK,CAACG,QAAN,CAAeP,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBN,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAlBD,CAzE4C,CA6F5C;;;AACA,QAAMZ,MAAM,GAAG,MAAOuB,SAAP,IAAqB;AAClC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAM/B,KAAK,CAACgC,IAAN,CAAY,GAAExC,GAAI,aAAlB,EAAgCsC,SAAhC,CAAvB;;AACA,UAAIC,QAAQ,CAACP,IAAT,CAAcC,OAAlB,EAA2B;AACzBf,QAAAA,cAAc,CAAC;AACbC,UAAAA,aAAa,EAAEZ,cADF;AAEb2B,UAAAA,OAAO,EAAEK,QAAQ,CAACP,IAAT,CAAcQ;AAFV,SAAD,CAAd;AAIA,eAAOD,QAAQ,CAACP,IAAhB;AACD;AACF,KATD,CASE,OAAOI,KAAP,EAAc;AACd,aAAOA,KAAK,CAACG,QAAN,CAAeP,IAAf,GACHI,KAAK,CAACG,QAAN,CAAeP,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBN,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CA9F4C,CA+G5C;;;AACA,QAAMyB,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMtB,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAW,GAAE/B,GAAI,aAAjB,CAAvB;;AACA,UAAI8B,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBf,QAAAA,cAAc,CAAC;AACbC,UAAAA,aAAa,EAAElB,yBADF;AAEbiC,UAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAcqB;AAFV,SAAD,CAAd;AAID;AACF,KARD,CAQE,OAAOjB,KAAP,EAAc;AACdlB,MAAAA,cAAc,CAAC;AAAEU,QAAAA,IAAI,EAAE1B;AAAR,OAAD,CAAd;AACD;AACF,GAZD;;AAcA,QAAMoD,eAAe,GAAG;AACtBvC,IAAAA,MADsB;AAEtBqC,IAAAA,aAFsB;AAGtBnC,IAAAA,WAHsB;AAItBL,IAAAA,SAJsB;AAKtByB,IAAAA,aALsB;AAMtBR,IAAAA,aANsB;AAOtBT,IAAAA,gBAPsB;AAQtBC,IAAAA,mBARsB;AAStBG,IAAAA,SATsB;AAUtBC,IAAAA,YAVsB;AAWtBgB,IAAAA,gBAXsB;AAYtBK,IAAAA,cAZsB;AAatBG,IAAAA,gBAbsB;AActB3B,IAAAA,mBAdsB;AAetBC,IAAAA;AAfsB,GAAxB;AAiBA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE+B,eAA7B;AAAA,cACG3C;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApJD;;GAAMD,mB;;KAAAA,mB;AAqJN,eAAeA,mBAAf","sourcesContent":["import { createContext, useReducer, useState } from \"react\";\nimport { typeReducer } from \"../reducers/typeReducer\";\nimport { configReducer } from \"../reducers/configReducer\";\nimport {\n  url,\n  CONFIGTYPE_LOADED_SUCCESS,\n  CONFIGTYPE_LOADED_FAIL,\n  ADD_CONFIGTYPE,\n  DELETE_CONFIGTYPE,\n  FIND_CONFIGTYPE,\n  UPDATE_CONFIGTYPE,\n  ADD_CONFIGDATA,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const TypeContext = createContext();\n\nconst TypeContextProvider = ({ children }) => {\n  const [typeState, dispatchType] = useReducer(typeReducer, {\n    configtype: null,\n    config: [],\n    configLoading: true,\n  });\n  const [configState, dispatchConfig] = useReducer(configReducer, {\n    currentConfig: [],\n    configLoading: true,\n  });\n\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null,\n  });\n\n  /// get config type of Crops\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n      if (responce.data.success) {\n        dispatchType({\n          type: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatchType({ type: CONFIGTYPE_LOADED_FAIL });\n    }\n  };\n\n  const addConfigtype = async (newConfig) => {\n    try {\n      const response = await axios.post(\n        `${url}/configdata/configtype`,\n        newConfig\n      );\n      if (response.data.success) {\n        dispatchType({\n          type: ADD_CONFIGTYPE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  const deleteConfigType = async (configTypeId) => {\n    try {\n      const responce = await axios.delete(\n        `${url}/configdata/configtype/${configTypeId}`\n      );\n      if (responce.data.success)\n        dispatchType({ type: DELETE_CONFIGTYPE, payload: configTypeId });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const findConfigType = (configTypeId) => {\n    const configtype = typeState.config.find(\n      (configtype) => configtype._id === configTypeId\n    );\n    dispatchType({ type: FIND_CONFIGTYPE, payload: configtype });\n  };\n\n  const updateConfigType = async (updatedConfigType) => {\n    try {\n      const response = await axios.put(\n        `${url}/configdata/configtype/${updatedConfigType._id}`,\n        updatedConfigType\n      );\n      if (response.data.success) {\n        dispatchType({\n          type: UPDATE_CONFIGTYPE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  // config data\n  const config = async (newConfig) => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n      if (response.data.success) {\n        dispatchConfig({\n          currentConfig: ADD_CONFIGDATA,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  //get current config\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n      if (responce.data.success) {\n        dispatchConfig({\n          currentConfig: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData,\n        });\n      }\n    } catch (error) {\n      dispatchConfig({ type: CONFIGTYPE_LOADED_FAIL });\n    }\n  };\n\n  const typeContextData = {\n    config,\n    getConfigData,\n    configState,\n    typeState,\n    addConfigtype,\n    getConfigType,\n    showAddTypeModal,\n    setShowAddTypeModal,\n    showToast,\n    setShowToast,\n    deleteConfigType,\n    findConfigType,\n    updateConfigType,\n    showUpdateTypeModal,\n    setShowUpdateTypeModal,\n  };\n  return (\n    <TypeContext.Provider value={typeContextData}>\n      {children}\n    </TypeContext.Provider>\n  );\n};\nexport default TypeContextProvider;\n"]},"metadata":{},"sourceType":"module"}