{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js\";\nimport React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts/dist/apexcharts.common.js\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  // const arrayTime = [];\n  // let seriesTempvalue = [];\n  // let seriesTDSvalue = [];\n  // let seriesPHvalue = [];\n  // const {\n  //   deviceState: { deviceData },\n  //   getDevice,\n  // } = useContext(DeviceContext);\n  // // //get last data\n  // useEffect(() => getDevice(), []);\n  // var optionsDevice = [];\n  // for (let i = 0; i < deviceData.length; i++) {\n  //   let value = [];\n  //   value = { value: deviceData[i].device, label: `Device ${i + 1}` };\n  //   optionsDevice.push(value);\n  // }\n  // console.log(optionsDevice);\n  // const [selectDevice, setselectDevice] = useState(\"Device 1\");\n  // const OnChangeDevice = (event) => {\n  //   setselectDevice(event.label);\n  // };\n  // console.log(selectDevice);\n  // var selectedDevice;\n  // for (let i = 0; i < deviceData.length; i++) {\n  //   if (selectDevice === optionsDevice[i].label) {\n  //     selectedDevice = deviceData[i].device;\n  //   }\n  // }\n  // const [time, setTime] = useState(\"1\");\n  // const onChange = () => (event) => {\n  //   setTime(event.value);\n  // };\n  // if (time === \"1\") {\n  //   fetchChartData(48, selectedDevice);\n  //   // window.dispatchEvent(new Event(\"resize\"));\n  // } else if (time === \"2\") {\n  //   fetchChartData(336, selectedDevice);\n  //   // window.dispatchEvent(new Event(\"resize\"));\n  // } else if (time === \"3\") {\n  //   fetchChartData(1440, selectedDevice);\n  //   // window.dispatchEvent(new Event(\"resize\"));\n  // }\n  // function fetchChartData(time, select) {\n  //   axios\n  //     .get(`${url}/data/chart/${select}/${time}`)\n  //     .then((response) => {\n  //       const data = response.data;\n  //       seriesTempvalue.push(...data.getalldata[0]);\n  //       seriesTDSvalue.push(...data.getalldata[1]);\n  //       seriesPHvalue.push(...data.getalldata[2]);\n  //       arrayTime.push(...data.getalldata[3]);\n  //       // window.dispatchEvent(new Event(\"resize\"));\n  //     })\n  //     .catch(() => {\n  //       console.log(\"Error retrieving data!!!\");\n  //     });\n  // }\n  // const seriesTemp = [\n  //   {\n  //     name: \"Temperature\",\n  //     data: seriesTempvalue,\n  //   },\n  // ];\n  // const optionsTemp = {\n  //   chart: {\n  //     id: \"area\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#00E396\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //   },\n  // };\n  // const seriesPH = [\n  //   {\n  //     name: \"PH\",\n  //     data: seriesPHvalue,\n  //   },\n  // ];\n  // const optionsPH = {\n  //   chart: {\n  //     id: \"ig\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#008FFB\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n  // const seriesTDS = [\n  //   {\n  //     name: \"TDS\",\n  //     data: seriesTDSvalue,\n  //   },\n  // ];\n  // const optionsTDS = {\n  //   chart: {\n  //     id: \"li\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#b37700\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n  // const options = [\n  //   { value: \"1\", label: \"1 day\" },\n  //   { value: \"2\", label: \"1 week\" },\n  //   { value: \"3\", label: \"1 month\" },\n  // ];\n  var options = {\n    series: [{\n      data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n        min: 10,\n        max: 60\n      })\n    }],\n    chart: {\n      id: \"fb\",\n      group: \"social\",\n      type: \"line\",\n      height: 160,\n      id: \"li\"\n    },\n    colors: [\"#008FFB\"]\n  };\n  var chart = new ApexCharts(document.querySelector(\"#chart-line\"), options);\n  chart.render();\n  var optionsLine2 = {\n    series: [{\n      data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n        min: 10,\n        max: 30\n      })\n    }],\n    chart: {\n      id: \"tw\",\n      group: \"social\",\n      type: \"line\",\n      height: 160\n    },\n    colors: [\"#546E7A\"]\n  };\n  var chartLine2 = new ApexCharts(document.querySelector(\"#chart-line2\"), optionsLine2);\n  chartLine2.render();\n  var optionsArea = {\n    series: [{\n      data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n        min: 10,\n        max: 60\n      })\n    }],\n    chart: {\n      id: \"yt\",\n      group: \"social\",\n      type: \"area\",\n      height: 160\n    },\n    colors: [\"#00E396\"]\n  };\n  var chartArea = new ApexCharts(document.querySelector(\"#chart-area\"), optionsArea);\n  chartArea.render();\n  var optionsSmall = {\n    series: [{\n      data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n        min: 10,\n        max: 60\n      })\n    }],\n    chart: {\n      id: \"ig\",\n      group: \"social\",\n      type: \"area\",\n      height: 160,\n      width: 300\n    },\n    colors: [\"#008FFB\"]\n  };\n  var chartSmall = new ApexCharts(document.querySelector(\"#chart-small\"), optionsSmall);\n  chartSmall.render();\n  var optionsSmall2 = {\n    series: [{\n      data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n        min: 10,\n        max: 60\n      })\n    }],\n    chart: {\n      id: \"li\",\n      group: \"social\",\n      type: \"area\",\n      height: 160,\n      width: 300\n    },\n    colors: [\"#546E7A\"]\n  };\n  var chartSmall2 = new ApexCharts(document.querySelector(\"#chart-small2\"), optionsSmall2);\n  chartSmall2.render();\n\n  function generateDayWiseTimeSeries(baseval, count, yrange) {\n    var i = 0;\n    var series = [];\n\n    while (i < count) {\n      var x = baseval;\n      var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n      series.push([x, y]);\n      baseval += 86400000;\n      i++;\n    }\n\n    return series;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chartSmall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chartSmall2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chartLine2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Statistics;\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"sources":["/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js"],"names":["React","axios","ReactApexChart","ApexCharts","Select","url","useState","useContext","useEffect","DeviceContext","Statistics","options","series","data","generateDayWiseTimeSeries","Date","getTime","min","max","chart","id","group","type","height","colors","document","querySelector","render","optionsLine2","chartLine2","optionsArea","chartArea","optionsSmall","width","chartSmall","optionsSmall2","chartSmall2","baseval","count","yrange","i","x","y","Math","floor","random","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts/dist/apexcharts.common.js\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\n\nconst Statistics = () => {\n  // const arrayTime = [];\n  // let seriesTempvalue = [];\n  // let seriesTDSvalue = [];\n  // let seriesPHvalue = [];\n\n  // const {\n  //   deviceState: { deviceData },\n  //   getDevice,\n  // } = useContext(DeviceContext);\n  // // //get last data\n  // useEffect(() => getDevice(), []);\n\n  // var optionsDevice = [];\n  // for (let i = 0; i < deviceData.length; i++) {\n  //   let value = [];\n  //   value = { value: deviceData[i].device, label: `Device ${i + 1}` };\n  //   optionsDevice.push(value);\n  // }\n  // console.log(optionsDevice);\n  // const [selectDevice, setselectDevice] = useState(\"Device 1\");\n\n  // const OnChangeDevice = (event) => {\n  //   setselectDevice(event.label);\n  // };\n  // console.log(selectDevice);\n  // var selectedDevice;\n\n  // for (let i = 0; i < deviceData.length; i++) {\n  //   if (selectDevice === optionsDevice[i].label) {\n  //     selectedDevice = deviceData[i].device;\n  //   }\n  // }\n\n  // const [time, setTime] = useState(\"1\");\n  // const onChange = () => (event) => {\n  //   setTime(event.value);\n  // };\n\n  // if (time === \"1\") {\n  //   fetchChartData(48, selectedDevice);\n  //   // window.dispatchEvent(new Event(\"resize\"));\n  // } else if (time === \"2\") {\n  //   fetchChartData(336, selectedDevice);\n  //   // window.dispatchEvent(new Event(\"resize\"));\n  // } else if (time === \"3\") {\n  //   fetchChartData(1440, selectedDevice);\n  //   // window.dispatchEvent(new Event(\"resize\"));\n  // }\n\n  // function fetchChartData(time, select) {\n  //   axios\n  //     .get(`${url}/data/chart/${select}/${time}`)\n  //     .then((response) => {\n  //       const data = response.data;\n  //       seriesTempvalue.push(...data.getalldata[0]);\n  //       seriesTDSvalue.push(...data.getalldata[1]);\n  //       seriesPHvalue.push(...data.getalldata[2]);\n  //       arrayTime.push(...data.getalldata[3]);\n  //       // window.dispatchEvent(new Event(\"resize\"));\n  //     })\n  //     .catch(() => {\n  //       console.log(\"Error retrieving data!!!\");\n  //     });\n  // }\n  // const seriesTemp = [\n  //   {\n  //     name: \"Temperature\",\n  //     data: seriesTempvalue,\n  //   },\n  // ];\n  // const optionsTemp = {\n  //   chart: {\n  //     id: \"area\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#00E396\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //   },\n  // };\n\n  // const seriesPH = [\n  //   {\n  //     name: \"PH\",\n  //     data: seriesPHvalue,\n  //   },\n  // ];\n  // const optionsPH = {\n  //   chart: {\n  //     id: \"ig\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#008FFB\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n\n  // const seriesTDS = [\n  //   {\n  //     name: \"TDS\",\n  //     data: seriesTDSvalue,\n  //   },\n  // ];\n  // const optionsTDS = {\n  //   chart: {\n  //     id: \"li\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#b37700\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n  // const options = [\n  //   { value: \"1\", label: \"1 day\" },\n  //   { value: \"2\", label: \"1 week\" },\n  //   { value: \"3\", label: \"1 month\" },\n  // ];\n  var options = {\n    series: [\n      {\n        data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n    ],\n    chart: {\n      id: \"fb\",\n      group: \"social\",\n      type: \"line\",\n      height: 160,\n      id: \"li\",\n    },\n    colors: [\"#008FFB\"],\n  };\n\n  var chart = new ApexCharts(document.querySelector(\"#chart-line\"), options);\n  chart.render();\n\n  var optionsLine2 = {\n    series: [\n      {\n        data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n          min: 10,\n          max: 30,\n        }),\n      },\n    ],\n    chart: {\n      id: \"tw\",\n      group: \"social\",\n      type: \"line\",\n      height: 160,\n    },\n    colors: [\"#546E7A\"],\n  };\n\n  var chartLine2 = new ApexCharts(\n    document.querySelector(\"#chart-line2\"),\n    optionsLine2\n  );\n  chartLine2.render();\n\n  var optionsArea = {\n    series: [\n      {\n        data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n    ],\n    chart: {\n      id: \"yt\",\n      group: \"social\",\n      type: \"area\",\n      height: 160,\n    },\n    colors: [\"#00E396\"],\n  };\n\n  var chartArea = new ApexCharts(\n    document.querySelector(\"#chart-area\"),\n    optionsArea\n  );\n  chartArea.render();\n\n  var optionsSmall = {\n    series: [\n      {\n        data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n    ],\n    chart: {\n      id: \"ig\",\n      group: \"social\",\n      type: \"area\",\n      height: 160,\n      width: 300,\n    },\n    colors: [\"#008FFB\"],\n  };\n\n  var chartSmall = new ApexCharts(\n    document.querySelector(\"#chart-small\"),\n    optionsSmall\n  );\n  chartSmall.render();\n\n  var optionsSmall2 = {\n    series: [\n      {\n        data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017\").getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n    ],\n    chart: {\n      id: \"li\",\n      group: \"social\",\n      type: \"area\",\n      height: 160,\n      width: 300,\n    },\n    colors: [\"#546E7A\"],\n  };\n\n  var chartSmall2 = new ApexCharts(\n    document.querySelector(\"#chart-small2\"),\n    optionsSmall2\n  );\n  chartSmall2.render();\n  function generateDayWiseTimeSeries(baseval, count, yrange) {\n    var i = 0;\n    var series = [];\n    while (i < count) {\n      var x = baseval;\n      var y =\n        Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n      series.push([x, y]);\n      baseval += 86400000;\n      i++;\n    }\n    return series;\n  }\n  return (\n    <>\n      <div id=\"app\">\n        <div id=\"chartSmall\"></div>\n        <div id=\"chartSmall2\"></div>\n        <div id=\"chartLine2\"></div>\n      </div>\n      {/* <div id=\"wrapper\" className=\"wrapper\">\n        <div className=\"select\">\n          <Select\n            options={optionsDevice}\n            className=\"selecttime\"\n            placeholder={<div>{selectDevice}</div>}\n            onChange={OnChangeDevice}\n          />\n          <Select\n            options={options}\n            className=\"selecttime\"\n            placeholder={<div>1 day</div>}\n            onChange={onChange}\n          />\n        </div>\n\n        <div className=\"chart-time-series\">\n          <div id=\"chart-small\" className=\"timeseries\">\n            <ReactApexChart\n              options={optionsPH}\n              series={seriesPH}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>PH Time Series Chart</h3>\n          </div>\n          <div id=\"chart-small2\" className=\"timeseries\">\n            <ReactApexChart\n              options={optionsTDS}\n              series={seriesTDS}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>TDS Time Series Chart</h3>\n          </div>\n\n          <div>\n            <div id=\"chart-area\" className=\"timeseries\">\n              <ReactApexChart\n                options={optionsTemp}\n                series={seriesTemp}\n                type=\"area\"\n                height={170}\n                width={1040}\n              />\n              <h3>Temperature Time Series Chart</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"wrapper\"></div> */}\n    </>\n  );\n};\n\nexport default Statistics;\n"]},"metadata":{},"sourceType":"module"}