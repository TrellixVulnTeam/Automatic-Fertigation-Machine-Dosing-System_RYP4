{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/backend/client/src/contexts/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useState } from \"react\";\nimport { dataReducer } from \"../reducers/dataReducer\";\nimport { url, DATA_LOADED_FAIL, DATA_LOADED_SUCCESS, ADD_DEVICE, CONFIG, STATE_LOADED_FAIL, STATE_LOADED_SUCCESS } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\n\nconst DataContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //state\n  const [dataState, dispatch] = useReducer(dataReducer, {\n    data: [],\n    dataLoading: true\n  });\n  const [stateState, dispatchState] = useReducer(dataReducer, {\n    state: [],\n    stateLoading: true\n  });\n  const [typeState, dispatchType] = useReducer(dataReducer, {\n    config: [],\n    configLoading: true\n  });\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null\n  }); //get data\n\n  const getData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data/chart`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const addDevices = async newDevice => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n\n      if (response.data.success) {\n        dispatch({\n          type: ADD_DEVICE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; // config data\n\n\n  const config = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; //get current config\n\n\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: DATA_LOADED_FAIL\n      });\n    }\n  }; //post new config type\n  /// get status of device\n\n\n  const getState = async () => {\n    try {\n      const responce = await axios.get(`${url}/state`);\n\n      if (responce.data.success) {\n        dispatch({\n          type: STATE_LOADED_SUCCESS,\n          payload: responce.data.getState\n        });\n      }\n    } catch (error) {\n      dispatchState({\n        type: STATE_LOADED_FAIL\n      });\n    }\n  };\n\n  const dataContextData = {\n    dataState,\n    stateState,\n    addDevices,\n    getData,\n    getChartData,\n    config,\n    getConfigData,\n    getState\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: dataContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataContextProvider, \"QLmkFle5aAeQOi5DYeX+/6WzlHI=\");\n\n_c = DataContextProvider;\nexport default DataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/backend/client/src/contexts/DataContext.js"],"names":["createContext","useReducer","useState","dataReducer","url","DATA_LOADED_FAIL","DATA_LOADED_SUCCESS","ADD_DEVICE","CONFIG","STATE_LOADED_FAIL","STATE_LOADED_SUCCESS","axios","DataContext","DataContextProvider","children","dataState","dispatch","data","dataLoading","stateState","dispatchState","state","stateLoading","typeState","dispatchType","config","configLoading","showAddTypeModal","setShowAddTypeModal","showUpdateTypeModal","setShowUpdateTypeModal","showToast","setShowToast","show","message","type","getData","responce","get","success","payload","getalldata","error","getChartData","addDevices","newDevice","response","post","newConfig","getConfigData","getLastConfigData","getState","dataContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,GADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,iBANF,EAOEC,oBAPF,QAQO,aARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,EAAjC;;AAEP,MAAMa,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBf,UAAU,CAACE,WAAD,EAAc;AACpDc,IAAAA,IAAI,EAAE,EAD8C;AAEpDC,IAAAA,WAAW,EAAE;AAFuC,GAAd,CAAxC;AAIA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BnB,UAAU,CAACE,WAAD,EAAc;AAC1DkB,IAAAA,KAAK,EAAE,EADmD;AAE1DC,IAAAA,YAAY,EAAE;AAF4C,GAAd,CAA9C;AAKA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BvB,UAAU,CAACE,WAAD,EAAc;AACxDsB,IAAAA,MAAM,EAAE,EADgD;AAExDC,IAAAA,aAAa,EAAE;AAFyC,GAAd,CAA5C;AAKA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0C1B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC2B,mBAAD,EAAsBC,sBAAtB,IAAgD5B,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC;AACzC+B,IAAAA,IAAI,EAAE,KADmC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,IAAI,EAAE;AAHmC,GAAD,CAA1C,CAlB4C,CAuB5C;;AACA,QAAMC,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,CAAW,GAAElC,GAAI,OAAjB,CAAvB;;AACA,UAAIiC,QAAQ,CAACpB,IAAT,CAAcsB,OAAlB,EAA2B;AACzBvB,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAE7B,mBADC;AAEPkC,UAAAA,OAAO,EAAEH,QAAQ,CAACpB,IAAT,CAAcwB;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACd1B,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE9B;AAAR,OAAD,CAAR;AACD;AACF,GAZD;;AAcA,QAAMsC,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMN,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,CAAW,GAAElC,GAAI,aAAjB,CAAvB;;AACA,UAAIiC,QAAQ,CAACpB,IAAT,CAAcsB,OAAlB,EAA2B;AACzBvB,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAE7B,mBADC;AAEPkC,UAAAA,OAAO,EAAEH,QAAQ,CAACpB,IAAT,CAAcwB;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACd1B,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE9B;AAAR,OAAD,CAAR;AACD;AACF,GAZD;;AAcA,QAAMuC,UAAU,GAAG,MAAOC,SAAP,IAAqB;AACtC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMnC,KAAK,CAACoC,IAAN,CAAY,GAAE3C,GAAI,SAAlB,EAA4ByC,SAA5B,CAAvB;;AACA,UAAIC,QAAQ,CAAC7B,IAAT,CAAcsB,OAAlB,EAA2B;AACzBvB,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAE5B,UADC;AAEPiC,UAAAA,OAAO,EAAEM,QAAQ,CAAC7B,IAAT,CAAc8B;AAFhB,SAAD,CAAR;AAIA,eAAOD,QAAQ,CAAC7B,IAAhB;AACD;AACF,KATD,CASE,OAAOyB,KAAP,EAAc;AACd,aAAOA,KAAK,CAACI,QAAN,CAAe7B,IAAf,GACHyB,KAAK,CAACI,QAAN,CAAe7B,IADZ,GAEH;AAAEsB,QAAAA,OAAO,EAAE,KAAX;AAAkBL,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CApD4C,CAoE5C;;;AACA,QAAMT,MAAM,GAAG,MAAOuB,SAAP,IAAqB;AAClC,QAAI;AACF,YAAMF,QAAQ,GAAG,MAAMnC,KAAK,CAACoC,IAAN,CAAY,GAAE3C,GAAI,aAAlB,EAAgC4C,SAAhC,CAAvB;;AACA,UAAIF,QAAQ,CAAC7B,IAAT,CAAcsB,OAAlB,EAA2B;AACzBvB,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAE3B,MADC;AAEPgC,UAAAA,OAAO,EAAEM,QAAQ,CAAC7B,IAAT,CAAc8B;AAFhB,SAAD,CAAR;AAIA,eAAOD,QAAQ,CAAC7B,IAAhB;AACD;AACF,KATD,CASE,OAAOyB,KAAP,EAAc;AACd,aAAOA,KAAK,CAACI,QAAN,CAAe7B,IAAf,GACHyB,KAAK,CAACI,QAAN,CAAe7B,IADZ,GAEH;AAAEsB,QAAAA,OAAO,EAAE,KAAX;AAAkBL,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CArE4C,CAsF5C;;;AACA,QAAMe,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMZ,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,CAAW,GAAElC,GAAI,aAAjB,CAAvB;;AACA,UAAIiC,QAAQ,CAACpB,IAAT,CAAcsB,OAAlB,EAA2B;AACzBvB,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAE7B,mBADC;AAEPkC,UAAAA,OAAO,EAAEH,QAAQ,CAACpB,IAAT,CAAciC;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOR,KAAP,EAAc;AACd1B,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE9B;AAAR,OAAD,CAAR;AACD;AACF,GAZD,CAvF4C,CAqG5C;AAEA;;;AACA,QAAM8C,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMd,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,CAAW,GAAElC,GAAI,QAAjB,CAAvB;;AACA,UAAIiC,QAAQ,CAACpB,IAAT,CAAcsB,OAAlB,EAA2B;AACzBvB,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAEzB,oBADC;AAEP8B,UAAAA,OAAO,EAAEH,QAAQ,CAACpB,IAAT,CAAckC;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOT,KAAP,EAAc;AACdtB,MAAAA,aAAa,CAAC;AAAEe,QAAAA,IAAI,EAAE1B;AAAR,OAAD,CAAb;AACD;AACF,GAZD;;AAcA,QAAM2C,eAAe,GAAG;AACtBrC,IAAAA,SADsB;AAEtBI,IAAAA,UAFsB;AAItByB,IAAAA,UAJsB;AAKtBR,IAAAA,OALsB;AAMtBO,IAAAA,YANsB;AAOtBlB,IAAAA,MAPsB;AAQtBwB,IAAAA,aARsB;AAStBE,IAAAA;AATsB,GAAxB;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,eAA7B;AAAA,cACGtC;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtID;;GAAMD,mB;;KAAAA,mB;AAuIN,eAAeA,mBAAf","sourcesContent":["import { createContext, useReducer, useState } from \"react\";\nimport { dataReducer } from \"../reducers/dataReducer\";\nimport {\n  url,\n  DATA_LOADED_FAIL,\n  DATA_LOADED_SUCCESS,\n  ADD_DEVICE,\n  CONFIG,\n  STATE_LOADED_FAIL,\n  STATE_LOADED_SUCCESS,\n} from \"./constants\";\nimport axios from \"axios\";\n\nexport const DataContext = createContext();\n\nconst DataContextProvider = ({ children }) => {\n  //state\n  const [dataState, dispatch] = useReducer(dataReducer, {\n    data: [],\n    dataLoading: true,\n  });\n  const [stateState, dispatchState] = useReducer(dataReducer, {\n    state: [],\n    stateLoading: true,\n  });\n\n  const [typeState, dispatchType] = useReducer(dataReducer, {\n    config: [],\n    configLoading: true,\n  });\n\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null,\n  });\n  //get data\n  const getData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      const responce = await axios.get(`${url}/data/chart`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  const addDevices = async (newDevice) => {\n    try {\n      const response = await axios.post(`${url}/device`, newDevice);\n      if (response.data.success) {\n        dispatch({\n          type: ADD_DEVICE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n  // config data\n  const config = async (newConfig) => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n      if (response.data.success) {\n        dispatch({\n          type: CONFIG,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  //get current config\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n      if (responce.data.success) {\n        dispatch({\n          type: DATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData,\n        });\n      }\n    } catch (error) {\n      dispatch({ type: DATA_LOADED_FAIL });\n    }\n  };\n\n  //post new config type\n\n  /// get status of device\n  const getState = async () => {\n    try {\n      const responce = await axios.get(`${url}/state`);\n      if (responce.data.success) {\n        dispatch({\n          type: STATE_LOADED_SUCCESS,\n          payload: responce.data.getState,\n        });\n      }\n    } catch (error) {\n      dispatchState({ type: STATE_LOADED_FAIL });\n    }\n  };\n\n  const dataContextData = {\n    dataState,\n    stateState,\n\n    addDevices,\n    getData,\n    getChartData,\n    config,\n    getConfigData,\n    getState,\n  };\n  return (\n    <DataContext.Provider value={dataContextData}>\n      {children}\n    </DataContext.Provider>\n  );\n};\nexport default DataContextProvider;\n"]},"metadata":{},"sourceType":"module"}