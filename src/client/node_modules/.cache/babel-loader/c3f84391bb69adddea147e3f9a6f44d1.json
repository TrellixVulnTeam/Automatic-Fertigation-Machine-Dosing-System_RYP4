{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  _s();\n\n  const arrayTime = [];\n  let seriesTempvalue = [];\n  let seriesTDSvalue = [];\n  let seriesPHvalue = [];\n  const {\n    deviceState: {\n      deviceData\n    },\n    getDevice\n  } = useContext(DeviceContext); // //get last data\n\n  useEffect(() => getDevice(), []);\n  var optionsDevice = [];\n\n  for (let i = 0; i < deviceData.length; i++) {\n    let value = [];\n    value = {\n      value: deviceData[i].device,\n      label: `Device ${i + 1}`\n    };\n    optionsDevice.push(value);\n  }\n\n  console.log(optionsDevice);\n  const [selectDevice, setselectDevice] = useState(\"Device 2\");\n\n  const OnChangeDevice = event => {\n    setselectDevice(event.label);\n  };\n\n  console.log(selectDevice);\n  var selectedDevice = null;\n\n  for (let i = 0; i < deviceData.length; i++) {\n    if (selectDevice === optionsDevice[i].label) {\n      selectedDevice = deviceData[i].device;\n    }\n  }\n\n  const [time, setTime] = useState(\"1\");\n\n  const onChange = () => event => {\n    setTime(event.value);\n  };\n\n  function fetchChartData(time, select) {\n    axios.get(`${url}/data/chart/${select}/${time}`).then(response => {\n      const data = response.data;\n      seriesTempvalue.push(...data.getalldata[0]);\n      seriesTDSvalue.push(...data.getalldata[1]);\n      seriesPHvalue.push(...data.getalldata[2]);\n      arrayTime.push(...data.getalldata[3]);\n      window.dispatchEvent(new Event(\"resize\"));\n    }).catch(() => {\n      console.log(\"Error retrieving data!!!\");\n    });\n  }\n\n  if (time === \"1\") {\n    fetchChartData(48, selectedDevice); // window.dispatchEvent(new Event(\"resize\"));\n  } else if (time === \"2\") {\n    fetchChartData(336, selectedDevice); // window.dispatchEvent(new Event(\"resize\"));\n  } else if (time === \"3\") {\n    fetchChartData(1440, selectedDevice); // window.dispatchEvent(new Event(\"resize\"));\n  }\n\n  console.log(seriesPHvalue);\n  console.log(seriesTempvalue);\n  console.log(seriesTDSvalue); // const [chartData, setChartData] = useState({\n  //   seriesTemp: [\n  //     {\n  //       name: \"Temperature\",\n  //       data: [],\n  //     },\n  //   ],\n  //   optionsTemp: {\n  //     chart: {\n  //       id: \"area\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#00E396\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: [],\n  //     },\n  //     noData: {\n  //       text: \"Loading...\",\n  //     },\n  //   },\n  //   seriesPH: [\n  //     {\n  //       name: \"PH\",\n  //       data: [],\n  //     },\n  //   ],\n  //   optionsPH: {\n  //     chart: {\n  //       id: \"ig\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#008FFB\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: [],\n  //       tickAmount: 6,\n  //     },\n  //     noData: {\n  //       text: \"Loading...\",\n  //     },\n  //   },\n  //   seriesTDS: [\n  //     {\n  //       name: \"TDS\",\n  //       data: [],\n  //     },\n  //   ],\n  //   optionsTDS: {\n  //     chart: {\n  //       id: \"li\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#b37700\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: [],\n  //       tickAmount: 6,\n  //     },\n  //     noData: {\n  //       text: \"Loading...\",\n  //     },\n  //   },\n  // });\n  // setChartData({\n  //   seriesTemp: [\n  //     {\n  //       name: \"Temperature\",\n  //       data: seriesTempvalue,\n  //     },\n  //   ],\n  //   optionsTemp: {\n  //     chart: {\n  //       id: \"area\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#00E396\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: arrayTime,\n  //     },\n  //   },\n  //   seriesPH: [\n  //     {\n  //       name: \"PH\",\n  //       data: seriesPHvalue,\n  //     },\n  //   ],\n  //   optionsPH: {\n  //     chart: {\n  //       id: \"ig\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#008FFB\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: arrayTime,\n  //       tickAmount: 6,\n  //     },\n  //   },\n  //   seriesTDS: [\n  //     {\n  //       name: \"TDS\",\n  //       data: seriesTDSvalue,\n  //     },\n  //   ],\n  //   optionsTDS: {\n  //     chart: {\n  //       id: \"li\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#b37700\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: arrayTime,\n  //       tickAmount: 6,\n  //     },\n  //   },\n  // });\n  // const seriesTemp = [\n  //   {\n  //     name: \"Temperature\",\n  //     data: seriesTempvalue,\n  //   },\n  // ];\n  // const optionsTemp = {\n  //   chart: {\n  //     id: \"area\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#00E396\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //   },\n  // };\n  // const seriesPH = [\n  //   {\n  //     name: \"PH\",\n  //     data: seriesPHvalue,\n  //   },\n  // ];\n  // const optionsPH = {\n  //   chart: {\n  //     id: \"ig\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#008FFB\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n  // const seriesTDS = [\n  //   {\n  //     name: \"TDS\",\n  //     data: seriesTDSvalue,\n  //   },\n  // ];\n  // const optionsTDS = {\n  //   chart: {\n  //     id: \"li\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#b37700\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n\n  let options = {\n    chart: {\n      type: \"line\"\n    },\n    series: [{\n      name: \"sales\",\n      data: []\n    }],\n    xaxis: {\n      categories: []\n    },\n    noData: {\n      text: \"Loading...\"\n    }\n  },\n      chart = new ApexCharts(document.querySelector(\"#chart\"), options),\n      logChart = () => console.log(chart),\n      destroyChart = () => {\n    if (chart.ohYeahThisChartHasBeenRendered) {\n      chart.destroy();\n      chart.ohYeahThisChartHasBeenRendered = false;\n    }\n  };\n\n  chart.render().then(() => chart.ohYeahThisChartHasBeenRendered = true);\n  const optionsTime = [{\n    value: \"1\",\n    label: \"1 day\"\n  }, {\n    value: \"2\",\n    label: \"1 week\"\n  }, {\n    value: \"3\",\n    label: \"1 month\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"wrapper\",\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: optionsDevice,\n          className: \"selecttime\",\n          placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: selectDevice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 26\n          }, this),\n          onChange: OnChangeDevice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: optionsTime,\n          className: \"selecttime\",\n          placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"1 day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 26\n          }, this),\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Statistics, \"1OjWlWU2UZ1EYTQOx6Ojx4t8/do=\");\n\n_c = Statistics;\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"sources":["/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js"],"names":["React","axios","ReactApexChart","ApexCharts","Select","url","useState","useContext","useEffect","DeviceContext","Statistics","arrayTime","seriesTempvalue","seriesTDSvalue","seriesPHvalue","deviceState","deviceData","getDevice","optionsDevice","i","length","value","device","label","push","console","log","selectDevice","setselectDevice","OnChangeDevice","event","selectedDevice","time","setTime","onChange","fetchChartData","select","get","then","response","data","getalldata","window","dispatchEvent","Event","catch","options","chart","type","series","name","xaxis","categories","noData","text","document","querySelector","logChart","destroyChart","ohYeahThisChartHasBeenRendered","destroy","render","optionsTime"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\n\nconst Statistics = () => {\n  const arrayTime = [];\n  let seriesTempvalue = [];\n  let seriesTDSvalue = [];\n  let seriesPHvalue = [];\n\n  const {\n    deviceState: { deviceData },\n    getDevice,\n  } = useContext(DeviceContext);\n  // //get last data\n  useEffect(() => getDevice(), []);\n\n  var optionsDevice = [];\n  for (let i = 0; i < deviceData.length; i++) {\n    let value = [];\n    value = { value: deviceData[i].device, label: `Device ${i + 1}` };\n    optionsDevice.push(value);\n  }\n  console.log(optionsDevice);\n\n  const [selectDevice, setselectDevice] = useState(\"Device 2\");\n  const OnChangeDevice = (event) => {\n    setselectDevice(event.label);\n  };\n  console.log(selectDevice);\n\n  var selectedDevice = null;\n  for (let i = 0; i < deviceData.length; i++) {\n    if (selectDevice === optionsDevice[i].label) {\n      selectedDevice = deviceData[i].device;\n    }\n  }\n\n  const [time, setTime] = useState(\"1\");\n  const onChange = () => (event) => {\n    setTime(event.value);\n  };\n  function fetchChartData(time, select) {\n    axios\n      .get(`${url}/data/chart/${select}/${time}`)\n      .then((response) => {\n        const data = response.data;\n\n        seriesTempvalue.push(...data.getalldata[0]);\n        seriesTDSvalue.push(...data.getalldata[1]);\n        seriesPHvalue.push(...data.getalldata[2]);\n        arrayTime.push(...data.getalldata[3]);\n        window.dispatchEvent(new Event(\"resize\"));\n      })\n      .catch(() => {\n        console.log(\"Error retrieving data!!!\");\n      });\n  }\n  if (time === \"1\") {\n    fetchChartData(48, selectedDevice);\n    // window.dispatchEvent(new Event(\"resize\"));\n  } else if (time === \"2\") {\n    fetchChartData(336, selectedDevice);\n    // window.dispatchEvent(new Event(\"resize\"));\n  } else if (time === \"3\") {\n    fetchChartData(1440, selectedDevice);\n    // window.dispatchEvent(new Event(\"resize\"));\n  }\n\n  console.log(seriesPHvalue);\n  console.log(seriesTempvalue);\n  console.log(seriesTDSvalue);\n\n  // const [chartData, setChartData] = useState({\n  //   seriesTemp: [\n  //     {\n  //       name: \"Temperature\",\n  //       data: [],\n  //     },\n  //   ],\n  //   optionsTemp: {\n  //     chart: {\n  //       id: \"area\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#00E396\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: [],\n  //     },\n  //     noData: {\n  //       text: \"Loading...\",\n  //     },\n  //   },\n  //   seriesPH: [\n  //     {\n  //       name: \"PH\",\n  //       data: [],\n  //     },\n  //   ],\n  //   optionsPH: {\n  //     chart: {\n  //       id: \"ig\",\n\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#008FFB\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: [],\n  //       tickAmount: 6,\n  //     },\n  //     noData: {\n  //       text: \"Loading...\",\n  //     },\n  //   },\n\n  //   seriesTDS: [\n  //     {\n  //       name: \"TDS\",\n  //       data: [],\n  //     },\n  //   ],\n  //   optionsTDS: {\n  //     chart: {\n  //       id: \"li\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#b37700\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: [],\n  //       tickAmount: 6,\n  //     },\n  //     noData: {\n  //       text: \"Loading...\",\n  //     },\n  //   },\n  // });\n\n  // setChartData({\n  //   seriesTemp: [\n  //     {\n  //       name: \"Temperature\",\n  //       data: seriesTempvalue,\n  //     },\n  //   ],\n  //   optionsTemp: {\n  //     chart: {\n  //       id: \"area\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#00E396\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: arrayTime,\n  //     },\n  //   },\n  //   seriesPH: [\n  //     {\n  //       name: \"PH\",\n  //       data: seriesPHvalue,\n  //     },\n  //   ],\n  //   optionsPH: {\n  //     chart: {\n  //       id: \"ig\",\n\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#008FFB\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: arrayTime,\n  //       tickAmount: 6,\n  //     },\n  //   },\n\n  //   seriesTDS: [\n  //     {\n  //       name: \"TDS\",\n  //       data: seriesTDSvalue,\n  //     },\n  //   ],\n  //   optionsTDS: {\n  //     chart: {\n  //       id: \"li\",\n  //       group: \"social\",\n  //       type: \"area\",\n  //     },\n  //     colors: [\"#b37700\"],\n  //     xaxis: {\n  //       type: \"datetime\",\n  //       categories: arrayTime,\n  //       tickAmount: 6,\n  //     },\n  //   },\n  // });\n  // const seriesTemp = [\n  //   {\n  //     name: \"Temperature\",\n  //     data: seriesTempvalue,\n  //   },\n  // ];\n  // const optionsTemp = {\n  //   chart: {\n  //     id: \"area\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#00E396\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //   },\n  // };\n\n  // const seriesPH = [\n  //   {\n  //     name: \"PH\",\n  //     data: seriesPHvalue,\n  //   },\n  // ];\n  // const optionsPH = {\n  //   chart: {\n  //     id: \"ig\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#008FFB\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n\n  // const seriesTDS = [\n  //   {\n  //     name: \"TDS\",\n  //     data: seriesTDSvalue,\n  //   },\n  // ];\n  // const optionsTDS = {\n  //   chart: {\n  //     id: \"li\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#b37700\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     categories: arrayTime,\n  //     tickAmount: 6,\n  //   },\n  // };\n\n  let options = {\n      chart: { type: \"line\" },\n      series: [{ name: \"sales\", data: [] }],\n      xaxis: {\n        categories: [],\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n    chart = new ApexCharts(document.querySelector(\"#chart\"), options),\n    logChart = () => console.log(chart),\n    destroyChart = () => {\n      if (chart.ohYeahThisChartHasBeenRendered) {\n        chart.destroy();\n        chart.ohYeahThisChartHasBeenRendered = false;\n      }\n    };\n\n  chart.render().then(() => (chart.ohYeahThisChartHasBeenRendered = true));\n\n  const optionsTime = [\n    { value: \"1\", label: \"1 day\" },\n    { value: \"2\", label: \"1 week\" },\n    { value: \"3\", label: \"1 month\" },\n  ];\n\n  return (\n    <>\n      <div id=\"wrapper\" className=\"wrapper\">\n        <div className=\"select\">\n          <Select\n            options={optionsDevice}\n            className=\"selecttime\"\n            placeholder={<div>{selectDevice}</div>}\n            onChange={OnChangeDevice}\n          />\n          <Select\n            options={optionsTime}\n            className=\"selecttime\"\n            placeholder={<div>1 day</div>}\n            onChange={onChange}\n          />\n        </div>\n        <div id=\"chart\"></div>\n        {/* <div className=\"chart-time-series\">\n          <div id=\"chart-small\" className=\"timeseries\">\n            <ReactApexChart\n              options={chartData.optionsPH}\n              series={chartData.seriesPH}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>PH Time Series Chart</h3>\n          </div>\n          <div id=\"chart-small2\" className=\"timeseries\">\n            <ReactApexChart\n              options={chartData.optionsTDS}\n              series={chartData.seriesTDS}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>TDS Time Series Chart</h3>\n          </div>\n\n          <div>\n            <div id=\"chart-area\" className=\"timeseries\">\n              <ReactApexChart\n                options={chartData.optionsTemp}\n                series={chartData.seriesTemp}\n                type=\"area\"\n                height={170}\n                width={1040}\n              />\n              <h3>Temperature Time Series Chart</h3>\n            </div>\n          </div>\n        </div> */}\n      </div>\n      <div className=\"wrapper\"></div>\n    </>\n  );\n};\n\nexport default Statistics;\n"]},"metadata":{},"sourceType":"module"}