{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/LVTN/client/src/contexts/TotalVolumeContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { totalVolumeReducer } from \"../reducers/totalVolumeReducer\";\nimport { url, TOTALVOLUME_LOADED_SUCCESS, TOTALVOLUME_LOADED_FAIL } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TotalVolumeContext = /*#__PURE__*/createContext();\n\nconst TotalVolumeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [totalVolumeState, dispatchTotalVolume] = useReducer(totalVolumeReducer, {\n    totalVolume: [],\n    totalVolumeLoading: true\n  }); /// get status of device\n\n  const getTotalVolume = async () => {\n    try {\n      const responce = await axios.get(`${url}/totalvolume`);\n\n      if (responce.data.success) {\n        dispatchTotalVolume({\n          totalVolume: TOTALVOLUME_LOADED_SUCCESS,\n          payload: responce.data.getalldata\n        });\n      }\n    } catch (error) {\n      dispatchTotalVolume({\n        totalVolume: TOTALVOLUME_LOADED_FAIL\n      });\n    }\n  };\n\n  const totalVolumeContextData = {\n    totalVolumeState,\n    getTotalVolume\n  };\n  return /*#__PURE__*/_jsxDEV(TotalVolumeContext.Provider, {\n    value: totalVolumeContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TotalVolumeContextProvider, \"TTD+Mej+zH58NfPNp/Nvh+i+nVc=\");\n\n_c = TotalVolumeContextProvider;\nexport default TotalVolumeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalVolumeContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/LVTN/client/src/contexts/TotalVolumeContext.js"],"names":["createContext","useReducer","totalVolumeReducer","url","TOTALVOLUME_LOADED_SUCCESS","TOTALVOLUME_LOADED_FAIL","axios","TotalVolumeContext","TotalVolumeContextProvider","children","totalVolumeState","dispatchTotalVolume","totalVolume","totalVolumeLoading","getTotalVolume","responce","get","data","success","payload","getalldata","error","totalVolumeContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SACEC,GADF,EAEEC,0BAFF,EAGEC,uBAHF,QAIO,aAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,kBAAkB,gBAAGP,aAAa,EAAxC;;AAEP,MAAMQ,0BAA0B,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnD,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CV,UAAU,CACxDC,kBADwD,EAExD;AACEU,IAAAA,WAAW,EAAE,EADf;AAEEC,IAAAA,kBAAkB,EAAE;AAFtB,GAFwD,CAA1D,CADmD,CAQnD;;AACA,QAAMC,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEb,GAAI,cAAjB,CAAvB;;AACA,UAAIY,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBP,QAAAA,mBAAmB,CAAC;AAClBC,UAAAA,WAAW,EAAER,0BADK;AAElBe,UAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAcG;AAFL,SAAD,CAAnB;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdV,MAAAA,mBAAmB,CAAC;AAAEC,QAAAA,WAAW,EAAEP;AAAf,OAAD,CAAnB;AACD;AACF,GAZD;;AAcA,QAAMiB,sBAAsB,GAAG;AAC7BZ,IAAAA,gBAD6B;AAE7BI,IAAAA;AAF6B,GAA/B;AAIA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEQ,sBAApC;AAAA,cACGb;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhCD;;GAAMD,0B;;KAAAA,0B;AAiCN,eAAeA,0BAAf","sourcesContent":["import { createContext, useReducer } from \"react\";\nimport { totalVolumeReducer } from \"../reducers/totalVolumeReducer\";\nimport {\n  url,\n  TOTALVOLUME_LOADED_SUCCESS,\n  TOTALVOLUME_LOADED_FAIL,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const TotalVolumeContext = createContext();\n\nconst TotalVolumeContextProvider = ({ children }) => {\n  const [totalVolumeState, dispatchTotalVolume] = useReducer(\n    totalVolumeReducer,\n    {\n      totalVolume: [],\n      totalVolumeLoading: true,\n    }\n  );\n  /// get status of device\n  const getTotalVolume = async () => {\n    try {\n      const responce = await axios.get(`${url}/totalvolume`);\n      if (responce.data.success) {\n        dispatchTotalVolume({\n          totalVolume: TOTALVOLUME_LOADED_SUCCESS,\n          payload: responce.data.getalldata,\n        });\n      }\n    } catch (error) {\n      dispatchTotalVolume({ totalVolume: TOTALVOLUME_LOADED_FAIL });\n    }\n  };\n\n  const totalVolumeContextData = {\n    totalVolumeState,\n    getTotalVolume,\n  };\n  return (\n    <TotalVolumeContext.Provider value={totalVolumeContextData}>\n      {children}\n    </TotalVolumeContext.Provider>\n  );\n};\nexport default TotalVolumeContextProvider;\n"]},"metadata":{},"sourceType":"module"}