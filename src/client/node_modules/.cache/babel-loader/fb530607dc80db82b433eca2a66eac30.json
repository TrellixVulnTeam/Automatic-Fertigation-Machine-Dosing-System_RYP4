{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/backend27042022/client/src/contexts/TypeContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useState } from \"react\";\nimport { typeReducer } from \"../reducers/typeReducer\";\nimport { url, CONFIGTYPE_LOADED_SUCCESS, CONFIGTYPE_LOADED_FAIL, ADD_CONFIGTYPE, DELETE_CONFIGTYPE, FIND_CONFIGTYPE, UPDATE_CONFIGTYPE } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TypeContext = /*#__PURE__*/createContext();\n\nconst TypeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [typeState, dispatchType] = useReducer(typeReducer, {\n    config: [],\n    configLoading: true\n  });\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null\n  }); /// get config type of Crops\n\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n\n      if (responce.data.success) {\n        dispatchType({\n          type: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatchType({\n        type: CONFIGTYPE_LOADED_FAIL\n      });\n    }\n  };\n\n  const addConfigtype = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata/configtype`, newConfig);\n\n      if (response.data.success) {\n        dispatchType({\n          type: ADD_CONFIGTYPE,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  };\n\n  const typeContextData = {\n    typeState,\n    addConfigtype,\n    getConfigType,\n    showAddTypeModal,\n    setShowAddTypeModal,\n    showToast,\n    setShowToast\n  };\n  return /*#__PURE__*/_jsxDEV(TypeContext.Provider, {\n    value: typeContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TypeContextProvider, \"fKqLJO1dq3Y/lyK9HaQ1iWeig8g=\");\n\n_c = TypeContextProvider;\nexport default TypeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/backend27042022/client/src/contexts/TypeContext.js"],"names":["createContext","useReducer","useState","typeReducer","url","CONFIGTYPE_LOADED_SUCCESS","CONFIGTYPE_LOADED_FAIL","ADD_CONFIGTYPE","DELETE_CONFIGTYPE","FIND_CONFIGTYPE","UPDATE_CONFIGTYPE","axios","TypeContext","TypeContextProvider","children","typeState","dispatchType","config","configLoading","showAddTypeModal","setShowAddTypeModal","showToast","setShowToast","show","message","type","getConfigType","responce","get","data","success","payload","getLastConfigType","error","addConfigtype","newConfig","response","post","typeContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,GADF,EAEEC,yBAFF,EAGEC,sBAHF,EAIEC,cAJF,EAKEC,iBALF,EAMEC,eANF,EAOEC,iBAPF,QAQO,aARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,EAAjC;;AAEP,MAAMa,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,UAAU,CAACE,WAAD,EAAc;AACxDc,IAAAA,MAAM,EAAE,EADgD;AAExDC,IAAAA,aAAa,EAAE;AAFyC,GAAd,CAA5C;AAKA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC;AACzCqB,IAAAA,IAAI,EAAE,KADmC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,IAAI,EAAE;AAHmC,GAAD,CAA1C,CAP4C,CAa5C;;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAW,GAAExB,GAAI,wBAAjB,CAAvB;;AACA,UAAIuB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBd,QAAAA,YAAY,CAAC;AACXS,UAAAA,IAAI,EAAEpB,yBADK;AAEX0B,UAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAcG;AAFZ,SAAD,CAAZ;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdjB,MAAAA,YAAY,CAAC;AAAES,QAAAA,IAAI,EAAEnB;AAAR,OAAD,CAAZ;AACD;AACF,GAZD;;AAcA,QAAM4B,aAAa,GAAG,MAAOC,SAAP,IAAqB;AACzC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,IAAN,CACpB,GAAEjC,GAAI,wBADc,EAErB+B,SAFqB,CAAvB;;AAIA,UAAIC,QAAQ,CAACP,IAAT,CAAcC,OAAlB,EAA2B;AACzBd,QAAAA,YAAY,CAAC;AACXS,UAAAA,IAAI,EAAElB,cADK;AAEXwB,UAAAA,OAAO,EAAEK,QAAQ,CAACP,IAAT,CAAcQ;AAFZ,SAAD,CAAZ;AAIA,eAAOD,QAAQ,CAACP,IAAhB;AACD;AACF,KAZD,CAYE,OAAOI,KAAP,EAAc;AACd,aAAOA,KAAK,CAACG,QAAN,CAAeP,IAAf,GACHI,KAAK,CAACG,QAAN,CAAeP,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBN,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAlBD;;AAoBA,QAAMc,eAAe,GAAG;AACtBvB,IAAAA,SADsB;AAEtBmB,IAAAA,aAFsB;AAGtBR,IAAAA,aAHsB;AAItBP,IAAAA,gBAJsB;AAKtBC,IAAAA,mBALsB;AAMtBC,IAAAA,SANsB;AAOtBC,IAAAA;AAPsB,GAAxB;AASA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEgB,eAA7B;AAAA,cACGxB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9DD;;GAAMD,mB;;KAAAA,mB;AA+DN,eAAeA,mBAAf","sourcesContent":["import { createContext, useReducer, useState } from \"react\";\nimport { typeReducer } from \"../reducers/typeReducer\";\nimport {\n  url,\n  CONFIGTYPE_LOADED_SUCCESS,\n  CONFIGTYPE_LOADED_FAIL,\n  ADD_CONFIGTYPE,\n  DELETE_CONFIGTYPE,\n  FIND_CONFIGTYPE,\n  UPDATE_CONFIGTYPE,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const TypeContext = createContext();\n\nconst TypeContextProvider = ({ children }) => {\n  const [typeState, dispatchType] = useReducer(typeReducer, {\n    config: [],\n    configLoading: true,\n  });\n\n  const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    message: \"\",\n    type: null,\n  });\n\n  /// get config type of Crops\n  const getConfigType = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata/configtype`);\n      if (responce.data.success) {\n        dispatchType({\n          type: CONFIGTYPE_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatchType({ type: CONFIGTYPE_LOADED_FAIL });\n    }\n  };\n\n  const addConfigtype = async (newConfig) => {\n    try {\n      const response = await axios.post(\n        `${url}/configdata/configtype`,\n        newConfig\n      );\n      if (response.data.success) {\n        dispatchType({\n          type: ADD_CONFIGTYPE,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  const typeContextData = {\n    typeState,\n    addConfigtype,\n    getConfigType,\n    showAddTypeModal,\n    setShowAddTypeModal,\n    showToast,\n    setShowToast,\n  };\n  return (\n    <TypeContext.Provider value={typeContextData}>\n      {children}\n    </TypeContext.Provider>\n  );\n};\nexport default TypeContextProvider;\n"]},"metadata":{},"sourceType":"module"}