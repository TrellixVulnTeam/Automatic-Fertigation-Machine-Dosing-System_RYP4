{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  _s();\n\n  const arrayTime = [];\n  let seriesTemp = [];\n  let seriesTDS = [];\n  let seriesPH = [];\n  const [selectedDevice, setSelectDevice] = useState(\"\");\n  const {\n    deviceState: {\n      deviceData\n    },\n    getDevice\n  } = useContext(DeviceContext); // //get last data\n\n  const [chartData, setChartData] = useState({\n    seriesTemperature: [{\n      name: \"Temperature\",\n      data: []\n    }],\n    optionsTemperature: {\n      chart: {\n        id: \"area\",\n        group: \"social\",\n        type: \"area\"\n      },\n      colors: [\"#00E396\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: []\n      },\n      noData: {\n        text: \"Loading...\"\n      }\n    },\n    seriesPHChart: [{\n      name: \"PH\",\n      data: []\n    }],\n    optionsPhChart: {\n      chart: {\n        id: \"ig\",\n        group: \"social\",\n        type: \"area\"\n      },\n      colors: [\"#008FFB\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6\n      },\n      noData: {\n        text: \"Loading...\"\n      }\n    },\n    seriesTDSChart: [{\n      name: \"TDS\",\n      data: []\n    }],\n    optionsTDSChart: {\n      chart: {\n        id: \"li\",\n        group: \"social\",\n        type: \"area\"\n      },\n      colors: [\"#b37700\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6\n      },\n      noData: {\n        text: \"Loading...\"\n      }\n    }\n  });\n  useEffect(() => {\n    getDevice();\n  }, []);\n  useEffect(() => {\n    if (deviceState) {\n      for (let i = 0; i < deviceData.length; i++) {\n        if (selectedDevice === optionsDevice[i].label) {\n          setSelectedDevice(deviceData[i].device);\n        }\n      }\n    }\n  }, [deviceState]);\n  var optionsDevice = [];\n\n  for (let i = 0; i < deviceData.length; i++) {\n    let value = [];\n    value = {\n      value: deviceData[i].device,\n      label: `Device ${i + 1}`\n    };\n    optionsDevice.push(value);\n  }\n\n  console.log(optionsDevice);\n\n  const OnChangeDevice = event => {\n    setSelectedDevice(event.label);\n  };\n\n  const [time, setTime] = useState(\"1\"); // if (time === \"1\") {\n  //   console.log(selectedDevice);\n  //   fetchChartData(\"58bf251706a0\", 48);\n  // } else if (time === \"2\") {\n  //   console.log(selectedDevice);\n  //   fetchChartData(selectedDevice, 336);\n  // } else if (time === \"3\") {\n  //   console.log(selectedDevice);\n  //   fetchChartData(selectedDevice, 1440);\n  // }\n\n  function fetchChartData(device, length) {\n    axios.get(`${url}/data/chart/${device}/${length}`).then(response => {\n      const data = response.data;\n      console.log(data);\n      seriesTemp.push(...data.getalldata[0]);\n      seriesTDS.push(...data.getalldata[1]);\n      seriesPH.push(...data.getalldata[2]);\n      arrayTime.push(...data.getalldata[3]);\n      setChartData({\n        seriesTemp: [{\n          name: \"Temperature\",\n          data: seriesTemp\n        }],\n        optionsTemp: {\n          chart: {\n            id: \"area\",\n            group: \"social\",\n            type: \"area\"\n          },\n          colors: [\"#00E396\"],\n          xaxis: {\n            type: \"datetime\",\n            categories: arrayTime\n          }\n        },\n        seriesPH: [{\n          name: \"PH\",\n          data: seriesPH\n        }],\n        optionsPH: {\n          chart: {\n            id: \"ig\",\n            group: \"social\",\n            type: \"area\"\n          },\n          colors: [\"#008FFB\"],\n          xaxis: {\n            type: \"datetime\",\n            categories: arrayTime,\n            tickAmount: 6\n          }\n        },\n        seriesTDS: [{\n          name: \"TDS\",\n          data: seriesTDS\n        }],\n        optionsTDS: {\n          chart: {\n            id: \"li\",\n            group: \"social\",\n            type: \"area\"\n          },\n          colors: [\"#b37700\"],\n          xaxis: {\n            type: \"datetime\",\n            categories: arrayTime,\n            tickAmount: 6\n          }\n        }\n      });\n      window.dispatchEvent(new Event(\"resize\"));\n    }).catch(e => {\n      console.log(\"Error retrieving data!!!\");\n    });\n  }\n\n  useEffect(() => {\n    if (time === \"1\") {\n      console.log(selectedDevice);\n      fetchChartData(selectedDevice, 48);\n    } else if (time === \"2\") {\n      console.log(selectedDevice);\n      fetchChartData(selectedDevice, 336);\n    } else if (time === \"3\") {\n      console.log(selectedDevice);\n      fetchChartData(selectedDevice, 1440);\n    }\n  }, [selectedDevice, time]); // const seriesTemperature = [\n  //   {\n  //     name: \"Temperature\",\n  //     data: seriesTemp,\n  //   },\n  // ];\n  // const optionsTemperature = {\n  //   chart: {\n  //     id: \"area\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#00E396\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     min: arrayTime[0],\n  //   },\n  //   zoom: {\n  //     type: \"x\",\n  //     enabled: true,\n  //     autoScaleYaxis: true,\n  //   },\n  //   toolbar: {\n  //     autoSelected: \"zoom\",\n  //   },\n  // };\n  // const seriesPHChart = [\n  //   {\n  //     name: \"PH\",\n  //     data: seriesPH,\n  //   },\n  // ];\n  // const optionsPhChart = {\n  //   chart: {\n  //     id: \"ig\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#008FFB\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     min: arrayTime[0],\n  //     tickAmount: 6,\n  //   },\n  //   zoom: {\n  //     type: \"x\",\n  //     enabled: true,\n  //     autoScaleYaxis: true,\n  //   },\n  //   toolbar: {\n  //     autoSelected: \"zoom\",\n  //   },\n  // };\n  // const seriesTDSChart = [\n  //   {\n  //     name: \"TDS\",\n  //     data: seriesTDS,\n  //   },\n  // ];\n  // const optionsTDSChart = {\n  //   chart: {\n  //     id: \"li\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#b37700\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     min: arrayTime[0],\n  //     tickAmount: 6,\n  //   },\n  //   zoom: {\n  //     type: \"x\",\n  //     enabled: true,\n  //     autoScaleYaxis: true,\n  //   },\n  //   toolbar: {\n  //     autoSelected: \"zoom\",\n  //   },\n  // };\n\n  const options = [{\n    value: \"1\",\n    label: \"1 day\"\n  }, {\n    value: \"2\",\n    label: \"1 week\"\n  }, {\n    value: \"3\",\n    label: \"1 month\"\n  }];\n\n  const onChange = event => setTime(event.value);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"wrapper\",\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        options: optionsDevice,\n        className: \"selecttime\",\n        placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: selectedDevice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 24\n        }, this),\n        onChange: OnChangeDevice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: options,\n        className: \"selecttime\",\n        placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"1 day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 24\n        }, this),\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-time-series\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart-small\",\n          className: \"timeseries\",\n          children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n            options: chartData.optionsPhChart,\n            series: chartData.seriesPHChart,\n            type: \"area\",\n            height: 170,\n            width: 1040\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PH Time Series Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart-small2\",\n          className: \"timeseries\",\n          children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n            options: chartData.optionsTDSChart,\n            series: chartData.seriesTDSChart,\n            type: \"area\",\n            height: 170,\n            width: 1040\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"TDS Time Series Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"chart-area\",\n            className: \"timeseries\",\n            children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n              options: chartData.optionsTemperature,\n              series: chartData.seriesTemperature,\n              type: \"area\",\n              height: 170,\n              width: 1040\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Temperature Time Series Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Statistics, \"Cnk1o89uVJpNmr9/9iIWOsT8f2A=\");\n\n_c = Statistics;\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"sources":["/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js"],"names":["React","axios","ReactApexChart","Select","url","useState","useEffect","useContext","DeviceContext","Statistics","arrayTime","seriesTemp","seriesTDS","seriesPH","selectedDevice","setSelectDevice","deviceState","deviceData","getDevice","chartData","setChartData","seriesTemperature","name","data","optionsTemperature","chart","id","group","type","colors","xaxis","categories","noData","text","seriesPHChart","optionsPhChart","tickAmount","seriesTDSChart","optionsTDSChart","i","length","optionsDevice","label","setSelectedDevice","device","value","push","console","log","OnChangeDevice","event","time","setTime","fetchChartData","get","then","response","getalldata","optionsTemp","optionsPH","optionsTDS","window","dispatchEvent","Event","catch","e","options","onChange"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\n\nconst Statistics = () => {\n  const arrayTime = [];\n  let seriesTemp = [];\n  let seriesTDS = [];\n  let seriesPH = [];\n  const [selectedDevice, setSelectDevice] = useState(\"\");\n\n  const {\n    deviceState: { deviceData },\n    getDevice,\n  } = useContext(DeviceContext);\n  // //get last data\n\n  const [chartData, setChartData] = useState({\n    seriesTemperature: [\n      {\n        name: \"Temperature\",\n        data: [],\n      },\n    ],\n    optionsTemperature: {\n      chart: {\n        id: \"area\",\n        group: \"social\",\n        type: \"area\",\n      },\n      colors: [\"#00E396\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n    seriesPHChart: [\n      {\n        name: \"PH\",\n        data: [],\n      },\n    ],\n    optionsPhChart: {\n      chart: {\n        id: \"ig\",\n\n        group: \"social\",\n        type: \"area\",\n      },\n      colors: [\"#008FFB\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6,\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n\n    seriesTDSChart: [\n      {\n        name: \"TDS\",\n        data: [],\n      },\n    ],\n    optionsTDSChart: {\n      chart: {\n        id: \"li\",\n        group: \"social\",\n        type: \"area\",\n      },\n      colors: [\"#b37700\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6,\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n  });\n\n  useEffect(() => {\n    getDevice();\n  }, []);\n\n  useEffect(() => {\n    if (deviceState) {\n      for (let i = 0; i < deviceData.length; i++) {\n        if (selectedDevice === optionsDevice[i].label) {\n          setSelectedDevice(deviceData[i].device);\n        }\n      }\n    }\n  }, [deviceState]);\n\n  var optionsDevice = [];\n  for (let i = 0; i < deviceData.length; i++) {\n    let value = [];\n    value = { value: deviceData[i].device, label: `Device ${i + 1}` };\n    optionsDevice.push(value);\n  }\n  console.log(optionsDevice);\n\n  const OnChangeDevice = (event) => {\n    setSelectedDevice(event.label);\n  };\n\n  const [time, setTime] = useState(\"1\");\n  // if (time === \"1\") {\n  //   console.log(selectedDevice);\n  //   fetchChartData(\"58bf251706a0\", 48);\n  // } else if (time === \"2\") {\n  //   console.log(selectedDevice);\n  //   fetchChartData(selectedDevice, 336);\n  // } else if (time === \"3\") {\n  //   console.log(selectedDevice);\n  //   fetchChartData(selectedDevice, 1440);\n  // }\n  function fetchChartData(device, length) {\n    axios\n      .get(`${url}/data/chart/${device}/${length}`)\n      .then((response) => {\n        const data = response.data;\n        console.log(data);\n        seriesTemp.push(...data.getalldata[0]);\n        seriesTDS.push(...data.getalldata[1]);\n        seriesPH.push(...data.getalldata[2]);\n        arrayTime.push(...data.getalldata[3]);\n\n        setChartData({\n          seriesTemp: [\n            {\n              name: \"Temperature\",\n              data: seriesTemp,\n            },\n          ],\n          optionsTemp: {\n            chart: {\n              id: \"area\",\n              group: \"social\",\n              type: \"area\",\n            },\n            colors: [\"#00E396\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: arrayTime,\n            },\n          },\n          seriesPH: [\n            {\n              name: \"PH\",\n              data: seriesPH,\n            },\n          ],\n          optionsPH: {\n            chart: {\n              id: \"ig\",\n\n              group: \"social\",\n              type: \"area\",\n            },\n            colors: [\"#008FFB\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: arrayTime,\n              tickAmount: 6,\n            },\n          },\n\n          seriesTDS: [\n            {\n              name: \"TDS\",\n              data: seriesTDS,\n            },\n          ],\n          optionsTDS: {\n            chart: {\n              id: \"li\",\n              group: \"social\",\n              type: \"area\",\n            },\n            colors: [\"#b37700\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: arrayTime,\n              tickAmount: 6,\n            },\n          },\n        });\n\n        window.dispatchEvent(new Event(\"resize\"));\n      })\n      .catch((e) => {\n        console.log(\"Error retrieving data!!!\");\n      });\n  }\n\n  useEffect(() => {\n    if (time === \"1\") {\n      console.log(selectedDevice);\n      fetchChartData(selectedDevice, 48);\n    } else if (time === \"2\") {\n      console.log(selectedDevice);\n      fetchChartData(selectedDevice, 336);\n    } else if (time === \"3\") {\n      console.log(selectedDevice);\n      fetchChartData(selectedDevice, 1440);\n    }\n  }, [selectedDevice, time]);\n\n  // const seriesTemperature = [\n  //   {\n  //     name: \"Temperature\",\n  //     data: seriesTemp,\n  //   },\n  // ];\n  // const optionsTemperature = {\n  //   chart: {\n  //     id: \"area\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#00E396\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     min: arrayTime[0],\n  //   },\n  //   zoom: {\n  //     type: \"x\",\n  //     enabled: true,\n  //     autoScaleYaxis: true,\n  //   },\n  //   toolbar: {\n  //     autoSelected: \"zoom\",\n  //   },\n  // };\n\n  // const seriesPHChart = [\n  //   {\n  //     name: \"PH\",\n  //     data: seriesPH,\n  //   },\n  // ];\n  // const optionsPhChart = {\n  //   chart: {\n  //     id: \"ig\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#008FFB\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     min: arrayTime[0],\n  //     tickAmount: 6,\n  //   },\n  //   zoom: {\n  //     type: \"x\",\n  //     enabled: true,\n  //     autoScaleYaxis: true,\n  //   },\n  //   toolbar: {\n  //     autoSelected: \"zoom\",\n  //   },\n  // };\n\n  // const seriesTDSChart = [\n  //   {\n  //     name: \"TDS\",\n  //     data: seriesTDS,\n  //   },\n  // ];\n  // const optionsTDSChart = {\n  //   chart: {\n  //     id: \"li\",\n  //     group: \"social\",\n  //     type: \"area\",\n  //   },\n  //   colors: [\"#b37700\"],\n  //   xaxis: {\n  //     type: \"datetime\",\n  //     min: arrayTime[0],\n  //     tickAmount: 6,\n  //   },\n  //   zoom: {\n  //     type: \"x\",\n  //     enabled: true,\n  //     autoScaleYaxis: true,\n  //   },\n  //   toolbar: {\n  //     autoSelected: \"zoom\",\n  //   },\n  // };\n  const options = [\n    { value: \"1\", label: \"1 day\" },\n    { value: \"2\", label: \"1 week\" },\n    { value: \"3\", label: \"1 month\" },\n  ];\n\n  const onChange = (event) => setTime(event.value);\n\n  return (\n    <>\n      <div id=\"wrapper\" className=\"wrapper\">\n        <Select\n          options={optionsDevice}\n          className=\"selecttime\"\n          placeholder={<div>{selectedDevice}</div>}\n          onChange={OnChangeDevice}\n        />\n        <Select\n          options={options}\n          className=\"selecttime\"\n          placeholder={<div>1 day</div>}\n          onChange={onChange}\n        />\n        <div className=\"chart-time-series\">\n          <div id=\"chart-small\" className=\"timeseries\">\n            <ReactApexChart\n              options={chartData.optionsPhChart}\n              series={chartData.seriesPHChart}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>PH Time Series Chart</h3>\n          </div>\n          <div id=\"chart-small2\" className=\"timeseries\">\n            <ReactApexChart\n              options={chartData.optionsTDSChart}\n              series={chartData.seriesTDSChart}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>TDS Time Series Chart</h3>\n          </div>\n\n          <div>\n            <div id=\"chart-area\" className=\"timeseries\">\n              <ReactApexChart\n                options={chartData.optionsTemperature}\n                series={chartData.seriesTemperature}\n                type=\"area\"\n                height={170}\n                width={1040}\n              />\n              <h3>Temperature Time Series Chart</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"wrapper\"></div>\n    </>\n  );\n};\n\nexport default Statistics;\n"]},"metadata":{},"sourceType":"module"}