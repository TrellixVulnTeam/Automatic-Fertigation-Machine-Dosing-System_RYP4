{"ast":null,"code":"import { CONFIGTYPE_LOADED_SUCCESS, CONFIGTYPE_LOADED_FAIL, ADD_CONFIGTYPE, DELETE_CONFIGTYPE, FIND_CONFIGTYPE, UPDATE_CONFIGTYPE } from \"../contexts/constants\";\nexport const typeReducer = (typeagr, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CONFIGTYPE_LOADED_SUCCESS:\n      return { ...typeagr,\n        config: payload,\n        configLoading: false\n      };\n\n    case CONFIGTYPE_LOADED_FAIL:\n      return { ...typeagr,\n        config: [],\n        configLoading: false\n      };\n\n    case ADD_CONFIGTYPE:\n      return { ...typeagr,\n        config: [...typeagr.config, payload]\n      };\n\n    case DELETE_CONFIGTYPE:\n      return { ...typeagr,\n        config: typeagr.config.filter(config => config._id !== payload)\n      };\n\n    case FIND_CONFIGTYPE:\n      return { ...typeagr,\n        config: payload\n      };\n\n    case UPDATE_CONFIGTYPE:\n      const newType = typeagr.config.map(config => config._id === payload._id ? payload : config);\n      return { ...typeagr,\n        config: newType\n      };\n\n    default:\n      return typeagr;\n  }\n};","map":{"version":3,"sources":["/home/tran/Downloads/LVTN/client/src/reducers/typeReducer.js"],"names":["CONFIGTYPE_LOADED_SUCCESS","CONFIGTYPE_LOADED_FAIL","ADD_CONFIGTYPE","DELETE_CONFIGTYPE","FIND_CONFIGTYPE","UPDATE_CONFIGTYPE","typeReducer","typeagr","action","type","payload","config","configLoading","filter","_id","newType","map"],"mappings":"AAAA,SACEA,yBADF,EAEEC,sBAFF,EAGEC,cAHF,EAIEC,iBAJF,EAKEC,eALF,EAMEC,iBANF,QAOO,uBAPP;AAQA,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKT,yBAAL;AACE,aAAO,EACL,GAAGO,OADE;AAELI,QAAAA,MAAM,EAAED,OAFH;AAGLE,QAAAA,aAAa,EAAE;AAHV,OAAP;;AAKF,SAAKX,sBAAL;AACE,aAAO,EACL,GAAGM,OADE;AAELI,QAAAA,MAAM,EAAE,EAFH;AAGLC,QAAAA,aAAa,EAAE;AAHV,OAAP;;AAKF,SAAKV,cAAL;AACE,aAAO,EACL,GAAGK,OADE;AAELI,QAAAA,MAAM,EAAE,CAAC,GAAGJ,OAAO,CAACI,MAAZ,EAAoBD,OAApB;AAFH,OAAP;;AAKF,SAAKP,iBAAL;AACE,aAAO,EACL,GAAGI,OADE;AAELI,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAAR,CAAeE,MAAf,CAAuBF,MAAD,IAAYA,MAAM,CAACG,GAAP,KAAeJ,OAAjD;AAFH,OAAP;;AAKF,SAAKN,eAAL;AACE,aAAO,EAAE,GAAGG,OAAL;AAAcI,QAAAA,MAAM,EAAED;AAAtB,OAAP;;AAEF,SAAKL,iBAAL;AACE,YAAMU,OAAO,GAAGR,OAAO,CAACI,MAAR,CAAeK,GAAf,CAAoBL,MAAD,IACjCA,MAAM,CAACG,GAAP,KAAeJ,OAAO,CAACI,GAAvB,GAA6BJ,OAA7B,GAAuCC,MADzB,CAAhB;AAIA,aAAO,EACL,GAAGJ,OADE;AAELI,QAAAA,MAAM,EAAEI;AAFH,OAAP;;AAKF;AACE,aAAOR,OAAP;AAvCJ;AAyCD,CA3CM","sourcesContent":["import {\n  CONFIGTYPE_LOADED_SUCCESS,\n  CONFIGTYPE_LOADED_FAIL,\n  ADD_CONFIGTYPE,\n  DELETE_CONFIGTYPE,\n  FIND_CONFIGTYPE,\n  UPDATE_CONFIGTYPE,\n} from \"../contexts/constants\";\nexport const typeReducer = (typeagr, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case CONFIGTYPE_LOADED_SUCCESS:\n      return {\n        ...typeagr,\n        config: payload,\n        configLoading: false,\n      };\n    case CONFIGTYPE_LOADED_FAIL:\n      return {\n        ...typeagr,\n        config: [],\n        configLoading: false,\n      };\n    case ADD_CONFIGTYPE:\n      return {\n        ...typeagr,\n        config: [...typeagr.config, payload],\n      };\n\n    case DELETE_CONFIGTYPE:\n      return {\n        ...typeagr,\n        config: typeagr.config.filter((config) => config._id !== payload),\n      };\n\n    case FIND_CONFIGTYPE:\n      return { ...typeagr, config: payload };\n\n    case UPDATE_CONFIGTYPE:\n      const newType = typeagr.config.map((config) =>\n        config._id === payload._id ? payload : config\n      );\n\n      return {\n        ...typeagr,\n        config: newType,\n      };\n\n    default:\n      return typeagr;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}