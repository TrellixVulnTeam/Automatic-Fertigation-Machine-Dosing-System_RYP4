{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/LVTN/client/src/contexts/TypeModalContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { typeModalReducer } from \"../reducers/typeModalReducer\";\nimport { url, TYPEMODAL_LOADED_FAIL, TYPEMODAL_LOADED_SUCCESS } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TypeModalContext = /*#__PURE__*/createContext();\n\nconst TypeModalContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [typeModalState, dispatchTypeModal] = useReducer(typeModalReducer, {\n    typeModal: []\n  }); // get config type of Crops\n\n  const getTypeModal = async () => {\n    try {\n      const responce = await axios.get(`${url}/typemodal`);\n\n      if (responce.data.success) {\n        dispatchTypeModal({\n          type: TYPEMODAL_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatchTypeModal({\n        type: TYPEMODAL_LOADED_FAIL\n      });\n    }\n  };\n\n  const findConfigTypeModal = configTypeId => {\n    const configtypemodal = typeModalState.typeModal.find(configtype => configtype._id === configTypeId);\n    dispatchType({\n      type: FIND_CONFIGTYPE,\n      payload: configtype\n    });\n  };\n\n  const typeModalContextData = {\n    typeModalState,\n    getTypeModal\n  };\n  return /*#__PURE__*/_jsxDEV(TypeModalContext.Provider, {\n    value: typeModalContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TypeModalContextProvider, \"LSoHTcKwwCVSrhhUi1mVXgc1Irw=\");\n\n_c = TypeModalContextProvider;\nexport default TypeModalContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeModalContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/LVTN/client/src/contexts/TypeModalContext.js"],"names":["createContext","useReducer","typeModalReducer","url","TYPEMODAL_LOADED_FAIL","TYPEMODAL_LOADED_SUCCESS","axios","TypeModalContext","TypeModalContextProvider","children","typeModalState","dispatchTypeModal","typeModal","getTypeModal","responce","get","data","success","type","payload","getLastConfigType","error","findConfigTypeModal","configTypeId","configtypemodal","find","configtype","_id","dispatchType","FIND_CONFIGTYPE","typeModalContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,SACEC,GADF,EAEEC,qBAFF,EAGEC,wBAHF,QAIO,aAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,gBAAgB,gBAAGP,aAAa,EAAtC;;AAEP,MAAMQ,wBAAwB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACjD,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,UAAU,CAACC,gBAAD,EAAmB;AACvEU,IAAAA,SAAS,EAAE;AAD4D,GAAnB,CAAtD,CADiD,CAKjD;;AACA,QAAMC,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEZ,GAAI,YAAjB,CAAvB;;AACA,UAAIW,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBN,QAAAA,iBAAiB,CAAC;AAChBO,UAAAA,IAAI,EAAEb,wBADU;AAEhBc,UAAAA,OAAO,EAAEL,QAAQ,CAACE,IAAT,CAAcI;AAFP,SAAD,CAAjB;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdV,MAAAA,iBAAiB,CAAC;AAAEO,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAjB;AACD;AACF,GAZD;;AAaA,QAAMkB,mBAAmB,GAAIC,YAAD,IAAkB;AAC5C,UAAMC,eAAe,GAAGd,cAAc,CAACE,SAAf,CAAyBa,IAAzB,CACrBC,UAAD,IAAgBA,UAAU,CAACC,GAAX,KAAmBJ,YADb,CAAxB;AAGAK,IAAAA,YAAY,CAAC;AAAEV,MAAAA,IAAI,EAAEW,eAAR;AAAyBV,MAAAA,OAAO,EAAEO;AAAlC,KAAD,CAAZ;AACD,GALD;;AAOA,QAAMI,oBAAoB,GAAG;AAC3BpB,IAAAA,cAD2B;AAE3BG,IAAAA;AAF2B,GAA7B;AAIA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEiB,oBAAlC;AAAA,cACGrB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnCD;;GAAMD,wB;;KAAAA,wB;AAoCN,eAAeA,wBAAf","sourcesContent":["import { createContext, useReducer } from \"react\";\nimport { typeModalReducer } from \"../reducers/typeModalReducer\";\n\nimport {\n  url,\n  TYPEMODAL_LOADED_FAIL,\n  TYPEMODAL_LOADED_SUCCESS,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const TypeModalContext = createContext();\n\nconst TypeModalContextProvider = ({ children }) => {\n  const [typeModalState, dispatchTypeModal] = useReducer(typeModalReducer, {\n    typeModal: [],\n  });\n\n  // get config type of Crops\n  const getTypeModal = async () => {\n    try {\n      const responce = await axios.get(`${url}/typemodal`);\n      if (responce.data.success) {\n        dispatchTypeModal({\n          type: TYPEMODAL_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatchTypeModal({ type: TYPEMODAL_LOADED_FAIL });\n    }\n  };\n  const findConfigTypeModal = (configTypeId) => {\n    const configtypemodal = typeModalState.typeModal.find(\n      (configtype) => configtype._id === configTypeId\n    );\n    dispatchType({ type: FIND_CONFIGTYPE, payload: configtype });\n  };\n\n  const typeModalContextData = {\n    typeModalState,\n    getTypeModal,\n  };\n  return (\n    <TypeModalContext.Provider value={typeModalContextData}>\n      {children}\n    </TypeModalContext.Provider>\n  );\n};\nexport default TypeModalContextProvider;\n"]},"metadata":{},"sourceType":"module"}