{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  _s();\n\n  const [selectedDevice, setSelectedDevice] = useState(\"Device 1\");\n  const [labelDevice, setLabelDevice] = useState(\"Device 1\");\n  const {\n    deviceState: {\n      deviceData\n    },\n    getDevice\n  } = useContext(DeviceContext); // //get last data\n\n  const [chartData, setChartData] = useState({\n    seriesTemperature: [{\n      name: \"Temperature\",\n      data: []\n    }],\n    optionsTemperature: {\n      chart: {\n        id: \"area\",\n        group: \"temp\",\n        type: \"area\"\n      },\n      colors: [\"#00E396\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: []\n      },\n      noData: {\n        text: \"Loading...\"\n      }\n    },\n    seriesPHChart: [{\n      name: \"PH\",\n      data: []\n    }],\n    optionsPhChart: {\n      chart: {\n        id: \"ig\",\n        group: \"ph\",\n        type: \"area\"\n      },\n      colors: [\"#008FFB\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6\n      },\n      noData: {\n        text: \"Loading...\"\n      }\n    },\n    seriesTDSChart: [{\n      name: \"TDS\",\n      data: []\n    }],\n    optionsTDSChart: {\n      chart: {\n        id: \"li\",\n        group: \"tds\",\n        type: \"area\"\n      },\n      colors: [\"#b37700\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6\n      },\n      noData: {\n        text: \"Loading...\"\n      }\n    }\n  });\n  useEffect(() => {\n    getDevice();\n  }, []);\n  var optionsDevice = [];\n\n  for (let i = 0; i < deviceData.length; i++) {\n    let value = [];\n    value = {\n      value: deviceData[i].device,\n      label: `Device ${i + 1}`\n    };\n    optionsDevice.push(value);\n  }\n\n  for (let i = 0; i < deviceData.length; i++) {\n    if (selectedDevice === optionsDevice[i].label) {\n      setSelectedDevice(deviceData[i].device);\n    }\n  }\n\n  console.log(selectedDevice);\n\n  const OnChangeDevice = event => {\n    setSelectedDevice(event.label);\n  };\n\n  const [time, setTime] = useState(\"1\");\n\n  function fetchChartData(device, length) {\n    axios.get(`${url}/data/chart/${device}/${length}`).then(response => {\n      const data = response.data;\n\n      if (data.getalldata[0].length !== 0) {\n        setChartData({\n          seriesTemperature: [{\n            name: \"Temperature\",\n            data: data.getalldata[0]\n          }],\n          optionsTemperature: {\n            chart: {\n              id: \"area\",\n              group: \"temp\",\n              type: \"area\"\n            },\n            colors: [\"#00E396\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: data.getalldata[3]\n            }\n          },\n          seriesPHChart: [{\n            name: \"PH\",\n            data: data.getalldata[2]\n          }],\n          optionsPhChart: {\n            chart: {\n              id: \"ig\",\n              group: \"ph\",\n              type: \"area\"\n            },\n            colors: [\"#008FFB\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: data.getalldata[3]\n            }\n          },\n          seriesTDSChart: [{\n            name: \"TDS\",\n            data: data.getalldata[1]\n          }],\n          optionsTDSChart: {\n            chart: {\n              id: \"li\",\n              group: \"tds\",\n              type: \"area\"\n            },\n            colors: [\"#b37700\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: data.getalldata[3]\n            }\n          }\n        });\n      } else {\n        setChartData({\n          seriesTemperature: [{\n            name: \"Temperature\",\n            data: []\n          }],\n          optionsTemperature: {\n            chart: {\n              id: \"area\",\n              group: \"temp\",\n              type: \"area\"\n            },\n            colors: [\"#00E396\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: []\n            }\n          },\n          seriesPHChart: [{\n            name: \"PH\",\n            data: []\n          }],\n          optionsPhChart: {\n            chart: {\n              id: \"ig\",\n              group: \"ph\",\n              type: \"area\"\n            },\n            colors: [\"#008FFB\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: []\n            }\n          },\n          seriesTDSChart: [{\n            name: \"TDS\",\n            data: []\n          }],\n          optionsTDSChart: {\n            chart: {\n              id: \"li\",\n              group: \"tds\",\n              type: \"area\"\n            },\n            colors: [\"#b37700\"],\n            xaxis: {\n              type: \"datetime\",\n              categories: []\n            }\n          }\n        });\n      }\n    }).catch(e => {\n      console.log(\"Error retrieving data!!!\");\n    });\n  }\n\n  useEffect(() => {\n    if (time === \"1\") {\n      fetchChartData(selectedDevice, 48);\n    } else if (time === \"2\") {\n      fetchChartData(selectedDevice, 336);\n    } else if (time === \"3\") {\n      fetchChartData(selectedDevice, 1440);\n    }\n  }, [selectedDevice, time]);\n  const timeOptions = [{\n    value: \"1\",\n    label: \"1 day\"\n  }, {\n    value: \"2\",\n    label: \"1 week\"\n  }, {\n    value: \"3\",\n    label: \"1 month\"\n  }];\n\n  const onChange = event => setTime(event.value);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"wrapper\",\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: optionsDevice,\n          className: \"selecttime\",\n          placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: selectedDevice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 26\n          }, this),\n          onChange: OnChangeDevice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: timeOptions,\n          className: \"selecttime\",\n          placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"1 day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 26\n          }, this),\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-time-series\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart-small\",\n          className: \"timeseries\",\n          children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n            options: chartData.optionsPhChart,\n            series: chartData.seriesPHChart,\n            type: \"area\",\n            height: 170,\n            width: 1040\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PH Time Series Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart-small2\",\n          className: \"timeseries\",\n          children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n            options: chartData.optionsTDSChart,\n            series: chartData.seriesTDSChart,\n            type: \"area\",\n            height: 170,\n            width: 1040\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"TDS Time Series Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"chart-area\",\n            className: \"timeseries\",\n            children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n              options: chartData.optionsTemperature,\n              series: chartData.seriesTemperature,\n              type: \"area\",\n              height: 170,\n              width: 1040\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Temperature Time Series Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Statistics, \"IaZys6Gpgrq/hlMeZkoe95agJZA=\");\n\n_c = Statistics;\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"sources":["/home/tran/Downloads/ESP32_full/src/client/src/views/Statistics.js"],"names":["React","axios","ReactApexChart","Select","url","useState","useEffect","useContext","DeviceContext","Statistics","selectedDevice","setSelectedDevice","labelDevice","setLabelDevice","deviceState","deviceData","getDevice","chartData","setChartData","seriesTemperature","name","data","optionsTemperature","chart","id","group","type","colors","xaxis","categories","noData","text","seriesPHChart","optionsPhChart","tickAmount","seriesTDSChart","optionsTDSChart","optionsDevice","i","length","value","device","label","push","console","log","OnChangeDevice","event","time","setTime","fetchChartData","get","then","response","getalldata","catch","e","timeOptions","onChange"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./statistics.css\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Select from \"react-select\";\nimport { url } from \"../contexts/constants\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { DeviceContext } from \"../contexts/DeviceContext\";\n\nconst Statistics = () => {\n  const [selectedDevice, setSelectedDevice] = useState(\"Device 1\");\n  const [labelDevice, setLabelDevice] = useState(\"Device 1\");\n  const {\n    deviceState: { deviceData },\n    getDevice,\n  } = useContext(DeviceContext);\n  // //get last data\n\n  const [chartData, setChartData] = useState({\n    seriesTemperature: [\n      {\n        name: \"Temperature\",\n        data: [],\n      },\n    ],\n    optionsTemperature: {\n      chart: {\n        id: \"area\",\n        group: \"temp\",\n        type: \"area\",\n      },\n      colors: [\"#00E396\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n    seriesPHChart: [\n      {\n        name: \"PH\",\n        data: [],\n      },\n    ],\n    optionsPhChart: {\n      chart: {\n        id: \"ig\",\n        group: \"ph\",\n        type: \"area\",\n      },\n      colors: [\"#008FFB\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6,\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n\n    seriesTDSChart: [\n      {\n        name: \"TDS\",\n        data: [],\n      },\n    ],\n    optionsTDSChart: {\n      chart: {\n        id: \"li\",\n        group: \"tds\",\n        type: \"area\",\n      },\n      colors: [\"#b37700\"],\n      xaxis: {\n        type: \"datetime\",\n        categories: [],\n        tickAmount: 6,\n      },\n      noData: {\n        text: \"Loading...\",\n      },\n    },\n  });\n\n  useEffect(() => {\n    getDevice();\n  }, []);\n\n  var optionsDevice = [];\n  for (let i = 0; i < deviceData.length; i++) {\n    let value = [];\n    value = { value: deviceData[i].device, label: `Device ${i + 1}` };\n    optionsDevice.push(value);\n  }\n\n  for (let i = 0; i < deviceData.length; i++) {\n    if (selectedDevice === optionsDevice[i].label) {\n      setSelectedDevice(deviceData[i].device);\n    }\n  }\n  console.log(selectedDevice);\n  const OnChangeDevice = (event) => {\n    setSelectedDevice(event.label);\n  };\n\n  const [time, setTime] = useState(\"1\");\n\n  function fetchChartData(device, length) {\n    axios\n      .get(`${url}/data/chart/${device}/${length}`)\n      .then((response) => {\n        const data = response.data;\n        if (data.getalldata[0].length !== 0) {\n          setChartData({\n            seriesTemperature: [\n              {\n                name: \"Temperature\",\n                data: data.getalldata[0],\n              },\n            ],\n            optionsTemperature: {\n              chart: {\n                id: \"area\",\n                group: \"temp\",\n                type: \"area\",\n              },\n              colors: [\"#00E396\"],\n              xaxis: {\n                type: \"datetime\",\n                categories: data.getalldata[3],\n              },\n            },\n            seriesPHChart: [\n              {\n                name: \"PH\",\n                data: data.getalldata[2],\n              },\n            ],\n            optionsPhChart: {\n              chart: {\n                id: \"ig\",\n                group: \"ph\",\n                type: \"area\",\n              },\n              colors: [\"#008FFB\"],\n              xaxis: {\n                type: \"datetime\",\n                categories: data.getalldata[3],\n              },\n            },\n            seriesTDSChart: [\n              {\n                name: \"TDS\",\n                data: data.getalldata[1],\n              },\n            ],\n            optionsTDSChart: {\n              chart: {\n                id: \"li\",\n                group: \"tds\",\n                type: \"area\",\n              },\n              colors: [\"#b37700\"],\n              xaxis: {\n                type: \"datetime\",\n                categories: data.getalldata[3],\n              },\n            },\n          });\n        } else {\n          setChartData({\n            seriesTemperature: [\n              {\n                name: \"Temperature\",\n                data: [],\n              },\n            ],\n            optionsTemperature: {\n              chart: {\n                id: \"area\",\n                group: \"temp\",\n                type: \"area\",\n              },\n              colors: [\"#00E396\"],\n              xaxis: {\n                type: \"datetime\",\n                categories: [],\n              },\n            },\n            seriesPHChart: [\n              {\n                name: \"PH\",\n                data: [],\n              },\n            ],\n            optionsPhChart: {\n              chart: {\n                id: \"ig\",\n                group: \"ph\",\n                type: \"area\",\n              },\n              colors: [\"#008FFB\"],\n              xaxis: {\n                type: \"datetime\",\n                categories: [],\n              },\n            },\n            seriesTDSChart: [\n              {\n                name: \"TDS\",\n                data: [],\n              },\n            ],\n            optionsTDSChart: {\n              chart: {\n                id: \"li\",\n                group: \"tds\",\n                type: \"area\",\n              },\n              colors: [\"#b37700\"],\n              xaxis: {\n                type: \"datetime\",\n                categories: [],\n              },\n            },\n          });\n        }\n      })\n      .catch((e) => {\n        console.log(\"Error retrieving data!!!\");\n      });\n  }\n\n  useEffect(() => {\n    if (time === \"1\") {\n      fetchChartData(selectedDevice, 48);\n    } else if (time === \"2\") {\n      fetchChartData(selectedDevice, 336);\n    } else if (time === \"3\") {\n      fetchChartData(selectedDevice, 1440);\n    }\n  }, [selectedDevice, time]);\n\n  const timeOptions = [\n    { value: \"1\", label: \"1 day\" },\n    { value: \"2\", label: \"1 week\" },\n    { value: \"3\", label: \"1 month\" },\n  ];\n\n  const onChange = (event) => setTime(event.value);\n\n  return (\n    <>\n      <div id=\"wrapper\" className=\"wrapper\">\n        <div className=\"select\">\n          <Select\n            options={optionsDevice}\n            className=\"selecttime\"\n            placeholder={<div>{selectedDevice}</div>}\n            onChange={OnChangeDevice}\n          />\n          <Select\n            options={timeOptions}\n            className=\"selecttime\"\n            placeholder={<div>1 day</div>}\n            onChange={onChange}\n          />\n        </div>\n\n        <div className=\"chart-time-series\">\n          <div id=\"chart-small\" className=\"timeseries\">\n            <ReactApexChart\n              options={chartData.optionsPhChart}\n              series={chartData.seriesPHChart}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>PH Time Series Chart</h3>\n          </div>\n          <div id=\"chart-small2\" className=\"timeseries\">\n            <ReactApexChart\n              options={chartData.optionsTDSChart}\n              series={chartData.seriesTDSChart}\n              type=\"area\"\n              height={170}\n              width={1040}\n            />\n            <h3>TDS Time Series Chart</h3>\n          </div>\n\n          <div>\n            <div id=\"chart-area\" className=\"timeseries\">\n              <ReactApexChart\n                options={chartData.optionsTemperature}\n                series={chartData.seriesTemperature}\n                type=\"area\"\n                height={170}\n                width={1040}\n              />\n              <h3>Temperature Time Series Chart</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"wrapper\"></div>\n    </>\n  );\n};\n\nexport default Statistics;\n"]},"metadata":{},"sourceType":"module"}