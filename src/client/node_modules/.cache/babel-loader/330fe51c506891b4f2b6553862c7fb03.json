{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/LVTN/client/src/contexts/ConfigContext.js\",\n    _s = $RefreshSig$();\n\nimport { configReducer } from \"../reducers/configReducer\";\nimport { url, ADD_CONFIGDATA, CONFIGDATA_LOADED_SUCCESS, CONFIGDATA_LOADED_FAIL } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConfigContext = createContext();\n\nconst ConfigContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [configState, dispatchConfig] = useReducer(configReducer, {\n    currentConfig: []\n  }); // config data\n\n  const config = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n\n      if (response.data.success) {\n        dispatchConfig({\n          currentConfig: ADD_CONFIGDATA,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; //get current config\n\n\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n\n      if (responce.data.success) {\n        dispatchConfig({\n          currentConfig: CONFIGDATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData\n        });\n      }\n    } catch (error) {\n      dispatchConfig({\n        currentConfig: CONFIGDATA_LOADED_FAIL\n      });\n    }\n  };\n\n  const configContextData = {\n    config,\n    getConfigData\n  };\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: configContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigContextProvider, \"NJlcIEtTg2f8m5h4/93ivy60BYg=\");\n\n_c = ConfigContextProvider;\nexport default ConfigContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/LVTN/client/src/contexts/ConfigContext.js"],"names":["configReducer","url","ADD_CONFIGDATA","CONFIGDATA_LOADED_SUCCESS","CONFIGDATA_LOADED_FAIL","axios","ConfigContext","createContext","ConfigContextProvider","children","configState","dispatchConfig","useReducer","currentConfig","config","newConfig","response","post","data","success","payload","error","message","getConfigData","responce","get","getLastConfigData","configContextData"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SACEC,GADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,sBAJF,QAKO,aALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,aAAa,GAAGC,aAAa,EAAnC;;AACP,MAAMC,qBAAqB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCC,UAAU,CAACZ,aAAD,EAAgB;AAC9Da,IAAAA,aAAa,EAAE;AAD+C,GAAhB,CAAhD,CAD8C,CAI9C;;AACA,QAAMC,MAAM,GAAG,MAAOC,SAAP,IAAqB;AAClC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAY,GAAEhB,GAAI,aAAlB,EAAgCc,SAAhC,CAAvB;;AACA,UAAIC,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBR,QAAAA,cAAc,CAAC;AACbE,UAAAA,aAAa,EAAEX,cADF;AAEbkB,UAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAcD;AAFV,SAAD,CAAd;AAIA,eAAOD,QAAQ,CAACE,IAAhB;AACD;AACF,KATD,CASE,OAAOG,KAAP,EAAc;AACd,aAAOA,KAAK,CAACL,QAAN,CAAeE,IAAf,GACHG,KAAK,CAACL,QAAN,CAAeE,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBG,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CAL8C,CAsB9C;;;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAW,GAAExB,GAAI,aAAjB,CAAvB;;AACA,UAAIuB,QAAQ,CAACN,IAAT,CAAcC,OAAlB,EAA2B;AACzBR,QAAAA,cAAc,CAAC;AACbE,UAAAA,aAAa,EAAEV,yBADF;AAEbiB,UAAAA,OAAO,EAAEI,QAAQ,CAACN,IAAT,CAAcQ;AAFV,SAAD,CAAd;AAID;AACF,KARD,CAQE,OAAOL,KAAP,EAAc;AACdV,MAAAA,cAAc,CAAC;AAAEE,QAAAA,aAAa,EAAET;AAAjB,OAAD,CAAd;AACD;AACF,GAZD;;AAaA,QAAMuB,iBAAiB,GAAG;AACxBb,IAAAA,MADwB;AAExBS,IAAAA;AAFwB,GAA1B;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEI,iBAA/B;AAAA,cACGlB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7CD;;GAAMD,qB;;KAAAA,qB;AA8CN,eAAeA,qBAAf","sourcesContent":["import { configReducer } from \"../reducers/configReducer\";\nimport {\n  url,\n  ADD_CONFIGDATA,\n  CONFIGDATA_LOADED_SUCCESS,\n  CONFIGDATA_LOADED_FAIL,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const ConfigContext = createContext();\nconst ConfigContextProvider = ({ children }) => {\n  const [configState, dispatchConfig] = useReducer(configReducer, {\n    currentConfig: [],\n  });\n  // config data\n  const config = async (newConfig) => {\n    try {\n      const response = await axios.post(`${url}/configdata`, newConfig);\n      if (response.data.success) {\n        dispatchConfig({\n          currentConfig: ADD_CONFIGDATA,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  //get current config\n  const getConfigData = async () => {\n    try {\n      const responce = await axios.get(`${url}/configdata`);\n      if (responce.data.success) {\n        dispatchConfig({\n          currentConfig: CONFIGDATA_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigData,\n        });\n      }\n    } catch (error) {\n      dispatchConfig({ currentConfig: CONFIGDATA_LOADED_FAIL });\n    }\n  };\n  const configContextData = {\n    config,\n    getConfigData,\n  };\n  return (\n    <ConfigContext.Provider value={configContextData}>\n      {children}\n    </ConfigContext.Provider>\n  );\n};\nexport default ConfigContextProvider;\n"]},"metadata":{},"sourceType":"module"}