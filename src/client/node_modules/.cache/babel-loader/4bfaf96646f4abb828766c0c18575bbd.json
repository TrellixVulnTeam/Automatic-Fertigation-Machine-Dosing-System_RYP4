{"ast":null,"code":"var _jsxFileName = \"/home/tran/Downloads/ESP32_full/src/client/src/contexts/SetVolumeContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useState } from \"react\";\nimport { setVolumeReducer } from \"../reducers/setVolumeReducer\";\nimport { url, SETVOLUME_LOADED_FAIL, SETVOLUME_LOADED_SUCCESS, ADD_SETVOLUME, FIND_SETVOLUME, UPDATE_SETVOLUME } from \"./constants\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SetVolumeContext = /*#__PURE__*/createContext();\n\nconst SetVolumeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [setVolumeState, dispatchSetVolume] = useReducer(setVolumeReducer, {\n    //configtype: null,\n    setVolume: [],\n    setVolumeLoading: true\n  }); //   const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  //   const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  //   const [showToast, setShowToast] = useState({\n  //     show: false,\n  //     message: \"\",\n  //     type: null,\n  //   });\n  /// get config type of Crops\n\n  const getSetVolume = async () => {\n    try {\n      const responce = await axios.get(`${url}/setvolume`);\n\n      if (responce.data.success) {\n        dispatchSetVolume({\n          type: SETVOLUME_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType\n        });\n      }\n    } catch (error) {\n      dispatchSetVolume({\n        type: SETVOLUME_LOADED_FAIL\n      });\n    }\n  };\n\n  const addSetVolume = async newConfig => {\n    try {\n      const response = await axios.post(`${url}/setvolume`, newConfig);\n\n      if (response.data.success) {\n        dispatchSetVolume({\n          type: ADD_SETVOLUME,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; //   const deleteConfigType = async (configTypeId) => {\n  //     try {\n  //       const responce = await axios.delete(\n  //         `${url}/configdata/configtype/${configTypeId}`\n  //       );\n  //       if (responce.data.success)\n  //         dispatchType({ type: DELETE_CONFIGTYPE, payload: configTypeId });\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n  // const findConfigType = (configTypeId) => {\n  //   const configtype = typeState.config.find(\n  //     (configtype) => configtype._id === configTypeId\n  //   );\n  //   dispatchType({ type: FIND_CONFIGTYPE, payload: configtype });\n  // };\n\n\n  const updateVolume = async updatedVolume => {\n    try {\n      const response = await axios.put(`${url}/setvolume${updatedVolume._id}`, updatedVolume);\n\n      if (response.data.success) {\n        dispatchSetVolume({\n          type: UPDATE_SETVOLUME,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  };\n\n  const setVolumeContextData = {\n    getSetVolume,\n    addSetVolume,\n    setVolumeState // getConfigType,\n    // showAddTypeModal,\n    // setShowAddTypeModal,\n    // showToast,\n    // setShowToast,\n    // deleteConfigType,\n    // findConfigType,\n    // updateConfigType,\n    // showUpdateTypeModal,\n    // setShowUpdateTypeModal,\n\n  };\n  return /*#__PURE__*/_jsxDEV(SetVolumeContext.Provider, {\n    value: setVolumeContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetVolumeContextProvider, \"qARLe9REqlfmB2XcbaRbfMC7Dto=\");\n\n_c = SetVolumeContextProvider;\nexport default SetVolumeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetVolumeContextProvider\");","map":{"version":3,"sources":["/home/tran/Downloads/ESP32_full/src/client/src/contexts/SetVolumeContext.js"],"names":["createContext","useReducer","useState","setVolumeReducer","url","SETVOLUME_LOADED_FAIL","SETVOLUME_LOADED_SUCCESS","ADD_SETVOLUME","FIND_SETVOLUME","UPDATE_SETVOLUME","axios","SetVolumeContext","SetVolumeContextProvider","children","setVolumeState","dispatchSetVolume","setVolume","setVolumeLoading","getSetVolume","responce","get","data","success","type","payload","getLastConfigType","error","addSetVolume","newConfig","response","post","message","updateVolume","updatedVolume","put","_id","setVolumeContextData"],"mappings":"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","sourcesContent":["import { createContext, useReducer, useState } from \"react\";\nimport { setVolumeReducer } from \"../reducers/setVolumeReducer\";\nimport {\n  url,\n  SETVOLUME_LOADED_FAIL,\n  SETVOLUME_LOADED_SUCCESS,\n  ADD_SETVOLUME,\n  FIND_SETVOLUME,\n  UPDATE_SETVOLUME,\n} from \"./constants\";\nimport axios from \"axios\";\nexport const SetVolumeContext = createContext();\n\nconst SetVolumeContextProvider = ({ children }) => {\n  const [setVolumeState, dispatchSetVolume] = useReducer(setVolumeReducer, {\n    //configtype: null,\n    setVolume: [],\n    setVolumeLoading: true,\n  });\n\n  //   const [showAddTypeModal, setShowAddTypeModal] = useState(false);\n  //   const [showUpdateTypeModal, setShowUpdateTypeModal] = useState(false);\n  //   const [showToast, setShowToast] = useState({\n  //     show: false,\n  //     message: \"\",\n  //     type: null,\n  //   });\n\n  /// get config type of Crops\n  const getSetVolume = async () => {\n    try {\n      const responce = await axios.get(`${url}/setvolume`);\n      if (responce.data.success) {\n        dispatchSetVolume({\n          type: SETVOLUME_LOADED_SUCCESS,\n          payload: responce.data.getLastConfigType,\n        });\n      }\n    } catch (error) {\n      dispatchSetVolume({ type: SETVOLUME_LOADED_FAIL });\n    }\n  };\n\n  const addSetVolume = async (newConfig) => {\n    try {\n      const response = await axios.post(`${url}/setvolume`, newConfig);\n      if (response.data.success) {\n        dispatchSetVolume({\n          type: ADD_SETVOLUME,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  //   const deleteConfigType = async (configTypeId) => {\n  //     try {\n  //       const responce = await axios.delete(\n  //         `${url}/configdata/configtype/${configTypeId}`\n  //       );\n  //       if (responce.data.success)\n  //         dispatchType({ type: DELETE_CONFIGTYPE, payload: configTypeId });\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n\n  // const findConfigType = (configTypeId) => {\n  //   const configtype = typeState.config.find(\n  //     (configtype) => configtype._id === configTypeId\n  //   );\n  //   dispatchType({ type: FIND_CONFIGTYPE, payload: configtype });\n  // };\n\n  const updateVolume = async (updatedVolume) => {\n    try {\n      const response = await axios.put(\n        `${url}/setvolume${updatedVolume._id}`,\n        updatedVolume\n      );\n      if (response.data.success) {\n        dispatchSetVolume({\n          type: UPDATE_SETVOLUME,\n          payload: response.data.post,\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data\n        ? error.response.data\n        : { success: false, message: \"Server error\" };\n    }\n  };\n\n  const setVolumeContextData = {\n    getSetVolume,\n    addSetVolume,\n    setVolumeState,\n    // getConfigType,\n    // showAddTypeModal,\n    // setShowAddTypeModal,\n    // showToast,\n    // setShowToast,\n    // deleteConfigType,\n    // findConfigType,\n    // updateConfigType,\n    // showUpdateTypeModal,\n    // setShowUpdateTypeModal,\n  };\n  return (\n    <SetVolumeContext.Provider value={setVolumeContextData}>\n      {children}\n    </SetVolumeContext.Provider>\n  );\n};\nexport default SetVolumeContextProvider;\n"]},"metadata":{},"sourceType":"module"}